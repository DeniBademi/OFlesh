import { BehaviorSubject } from 'rxjs';
import * as i0 from '@angular/core';
import { OnDestroy, NgZone, OnInit, OnChanges, EventEmitter } from '@angular/core';
import * as _livechat_widget_core from '@livechat/widget-core';
import { WidgetState, CustomerData, ChatData, Greeting, WidgetConfig, WidgetInstance } from '@livechat/widget-core';
export { ChatData, ChatEvent, CustomerData, EventHandlerPayload, RichMessageButton, WidgetConfig, WidgetState } from '@livechat/widget-core';

declare type WidgetIsReadySubject = typeof WidgetIsReadyService.prototype.subject;
declare class WidgetIsReadyService implements OnDestroy {
    private zone;
    private onDestroy;
    readonly subject: BehaviorSubject<boolean>;
    constructor(zone: NgZone);
    setIsReady(isReady: boolean): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<WidgetIsReadyService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<WidgetIsReadyService>;
}

declare type WidgetStateSubject = typeof WidgetStateService.prototype.subject;
declare class WidgetStateService implements OnDestroy {
    private zone;
    private onDestroy;
    readonly subject: BehaviorSubject<WidgetState | null>;
    constructor(zone: NgZone);
    setWidgetState(widgetState: WidgetState | null): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<WidgetStateService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<WidgetStateService>;
}

declare type WidgetCustomerDataSubject = typeof WidgetCustomerDataService.prototype.subject;
declare class WidgetCustomerDataService implements OnDestroy {
    private zone;
    private onDestroy;
    readonly subject: BehaviorSubject<CustomerData | null>;
    constructor(zone: NgZone);
    setCustomerData(data: CustomerData | null): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<WidgetCustomerDataService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<WidgetCustomerDataService>;
}

declare type WidgetChatDataSubject = typeof WidgetChatDataService.prototype.subject;
declare class WidgetChatDataService implements OnDestroy {
    private zone;
    private onDestroy;
    readonly subject: BehaviorSubject<ChatData | null>;
    constructor(zone: NgZone, widgetCustomerDataService: WidgetCustomerDataService);
    setChatData(data: ChatData | null): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<WidgetChatDataService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<WidgetChatDataService>;
}

declare type WidgetGreetingSubject = typeof WidgetGreetingService.prototype.subject;
declare class WidgetGreetingService implements OnDestroy {
    private zone;
    private onDestroy;
    readonly subject: BehaviorSubject<Greeting | null>;
    constructor(zone: NgZone);
    setGreeting(greeting: Greeting | null): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<WidgetGreetingService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<WidgetGreetingService>;
}

declare type Changes = Partial<{
    [key in keyof WidgetConfig]: {
        firstChange: boolean;
        previousValue: WidgetConfig[key];
        currentValue: WidgetConfig[key];
        isFirstChange(): boolean;
    };
}>;
declare class LiveChatWidgetComponent implements OnInit, OnDestroy, OnChanges {
    license: WidgetConfig['license'];
    group: WidgetConfig['group'];
    visibility: WidgetConfig['visibility'];
    customerName: WidgetConfig['customerName'];
    customerEmail: WidgetConfig['customerEmail'];
    sessionVariables: WidgetConfig['sessionVariables'];
    chatBetweenGroups: WidgetConfig['chatBetweenGroups'];
    customIdentityProvider: WidgetConfig['customIdentityProvider'];
    onReady: EventEmitter<{
        state: _livechat_widget_core.WidgetState;
        customerData: _livechat_widget_core.CustomerData;
    }>;
    onNewEvent: EventEmitter<_livechat_widget_core.ChatEvent>;
    onFormSubmitted: EventEmitter<{
        type: "prechat" | "postchat" | "ticket";
    }>;
    onRatingSubmitted: EventEmitter<"none" | "good" | "bad">;
    onGreetingHidden: EventEmitter<_livechat_widget_core.Greeting>;
    onGreetingDisplayed: EventEmitter<_livechat_widget_core.Greeting>;
    onVisibilityChanged: EventEmitter<Pick<_livechat_widget_core.WidgetState, "visibility">>;
    onCustomerStatusChanged: EventEmitter<Pick<_livechat_widget_core.CustomerData, "status">>;
    onRichMessageButtonClicked: EventEmitter<_livechat_widget_core.RichMessageButton>;
    onAvailabilityChanged: EventEmitter<Pick<_livechat_widget_core.WidgetState, "availability">>;
    widget: WidgetInstance | null;
    ngOnInit(): void;
    ngOnChanges(changes: Changes): void;
    ngOnDestroy(): void;
    setupWidget(): void;
    reinitialize(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<LiveChatWidgetComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<LiveChatWidgetComponent, "livechat-widget", never, { "license": "license"; "group": "group"; "visibility": "visibility"; "customerName": "customerName"; "customerEmail": "customerEmail"; "sessionVariables": "sessionVariables"; "chatBetweenGroups": "chatBetweenGroups"; "customIdentityProvider": "customIdentityProvider"; }, { "onReady": "onReady"; "onNewEvent": "onNewEvent"; "onFormSubmitted": "onFormSubmitted"; "onRatingSubmitted": "onRatingSubmitted"; "onGreetingHidden": "onGreetingHidden"; "onGreetingDisplayed": "onGreetingDisplayed"; "onVisibilityChanged": "onVisibilityChanged"; "onCustomerStatusChanged": "onCustomerStatusChanged"; "onRichMessageButtonClicked": "onRichMessageButtonClicked"; "onAvailabilityChanged": "onAvailabilityChanged"; }, never, never>;
}

declare class LiveChatWidgetModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<LiveChatWidgetModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<LiveChatWidgetModule, [typeof LiveChatWidgetComponent], never, [typeof LiveChatWidgetComponent]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<LiveChatWidgetModule>;
}

export { LiveChatWidgetComponent, LiveChatWidgetModule, WidgetChatDataService, WidgetChatDataSubject, WidgetCustomerDataService, WidgetCustomerDataSubject, WidgetGreetingService, WidgetGreetingSubject, WidgetIsReadyService, WidgetIsReadySubject, WidgetStateService, WidgetStateSubject };
