import { Inject, Injectable } from '@angular/core';
// import { Location } from '@angular/common';
import { Router, NavigationStart, ActivatedRoute, NavigationCancel } from '@angular/router';
import { Subject, ReplaySubject } from 'rxjs';
import { filter, pairwise } from 'rxjs/operators';
import { LocalizeParser } from './localize-router.parser';
import { LocalizeRouterSettings } from './localize-router.config';
import { deepCopy } from './util';
import * as i0 from "@angular/core";
import * as i1 from "./localize-router.parser";
import * as i2 from "./localize-router.config";
import * as i3 from "@angular/router";
/**
 * Localization service
 * modifyRoutes
 */
export class LocalizeRouterService {
    /**
     * CTOR
     */
    constructor(parser, settings, router, route /*,
    @Inject(Location) private location: Location*/) {
        this.parser = parser;
        this.settings = settings;
        this.router = router;
        this.route = route;
        this.routerEvents = new Subject();
        const initializedSubject = new ReplaySubject(1);
        this.hooks = {
            _initializedSubject: initializedSubject,
            initialized: initializedSubject.asObservable()
        };
    }
    /**
     * Start up the service
     */
    init() {
        this.applyConfigToRouter(this.parser.routes);
        // subscribe to router events
        this.router.events
            .pipe(filter(event => event instanceof NavigationStart), pairwise())
            .subscribe(this._routeChanged());
        if (this.settings.initialNavigation) {
            this.router.initialNavigation();
        }
    }
    /**
     * Change language and navigate to translated route
     */
    changeLanguage(lang, extras, useNavigateMethod) {
        if (lang !== this.parser.currentLang) {
            const rootSnapshot = this.router.routerState.snapshot.root;
            this.parser.translateRoutes(lang).subscribe(() => {
                let url = this.traverseRouteSnapshot(rootSnapshot);
                url = this.translateRoute(url);
                if (!this.settings.alwaysSetPrefix) {
                    let urlSegments = url.split('/');
                    const languageSegmentIndex = urlSegments.indexOf(this.parser.currentLang);
                    // If the default language has no prefix make sure to remove and add it when necessary
                    if (this.parser.currentLang === this.parser.defaultLang) {
                        // Remove the language prefix from url when current language is the default language
                        if (languageSegmentIndex === 0 || (languageSegmentIndex === 1 && urlSegments[0] === '')) {
                            // Remove the current aka default language prefix from the url
                            urlSegments = urlSegments.slice(0, languageSegmentIndex).concat(urlSegments.slice(languageSegmentIndex + 1));
                        }
                    }
                    else {
                        // When coming from a default language it's possible that the url doesn't contain the language, make sure it does.
                        if (languageSegmentIndex === -1) {
                            // If the url starts with a slash make sure to keep it.
                            const injectionIndex = urlSegments[0] === '' ? 1 : 0;
                            urlSegments = urlSegments.slice(0, injectionIndex).concat(this.parser.currentLang, urlSegments.slice(injectionIndex));
                        }
                    }
                    url = urlSegments.join('/');
                }
                // Prevent multiple "/" character
                url = url.replace(/\/+/g, '/');
                const lastSlashIndex = url.lastIndexOf('/');
                if (lastSlashIndex > 0 && lastSlashIndex === url.length - 1) {
                    url = url.slice(0, -1);
                }
                const queryParamsObj = this.parser.chooseQueryParams(extras, this.route.snapshot.queryParams);
                this.applyConfigToRouter(this.parser.routes);
                this.lastExtras = extras;
                if (useNavigateMethod) {
                    const extrasToApply = extras ? { ...extras } : {};
                    if (queryParamsObj) {
                        extrasToApply.queryParams = queryParamsObj;
                    }
                    this.router.navigate([url], extrasToApply);
                }
                else {
                    let queryParams = this.parser.formatQueryParams(queryParamsObj);
                    queryParams = queryParams ? `?${queryParams}` : '';
                    this.router.navigateByUrl(`${url}${queryParams}`, extras);
                }
            });
        }
    }
    /**
     * Traverses through the tree to assemble new translated url
     */
    traverseRouteSnapshot(snapshot) {
        if (snapshot.firstChild && snapshot.routeConfig) {
            return `${this.parseSegmentValue(snapshot)}/${this.traverseRouteSnapshot(snapshot.firstChild)}`;
        }
        else if (snapshot.firstChild) {
            return this.traverseRouteSnapshot(snapshot.firstChild);
        }
        else {
            return this.parseSegmentValue(snapshot);
        }
        /* if (snapshot.firstChild && snapshot.firstChild.routeConfig && snapshot.firstChild.routeConfig.path) {
          if (snapshot.firstChild.routeConfig.path !== '**') {
            return this.parseSegmentValue(snapshot) + '/' + this.traverseRouteSnapshot(snapshot.firstChild);
          } else {
            return this.parseSegmentValue(snapshot.firstChild);
          }
        }
        return this.parseSegmentValue(snapshot); */
    }
    /**
     * Build URL from segments and snapshot (for params)
     */
    buildUrlFromSegments(snapshot, segments) {
        return segments.map((s, i) => s.indexOf(':') === 0 ? snapshot.url[i].path : s).join('/');
    }
    /**
     * Extracts new segment value based on routeConfig and url
     */
    parseSegmentValue(snapshot) {
        if (snapshot.routeConfig && snapshot.routeConfig.matcher) {
            const subPathMatchedSegments = this.parseSegmentValueMatcher(snapshot);
            return this.buildUrlFromSegments(snapshot, subPathMatchedSegments);
        }
        else if (snapshot.data.localizeRouter) {
            const path = snapshot.data.localizeRouter.path;
            const subPathSegments = path.split('/');
            return this.buildUrlFromSegments(snapshot, subPathSegments);
        }
        else if (snapshot.parent && snapshot.parent.parent) { // Not lang route and no localizeRouter data = excluded path
            const path = snapshot.routeConfig.path;
            const subPathSegments = path.split('/');
            return this.buildUrlFromSegments(snapshot, subPathSegments);
        }
        else {
            return '';
        }
        /* if (snapshot.routeConfig) {
          if (snapshot.routeConfig.path === '**') {
            return snapshot.url.filter((segment: UrlSegment) => segment.path).map((segment: UrlSegment) => segment.path).join('/');
          } else {
            const subPathSegments = snapshot.routeConfig.path.split('/');
            return subPathSegments.map((s: string, i: number) => s.indexOf(':') === 0 ? snapshot.url[i].path : s).join('/');
          }
        }
        return ''; */
    }
    parseSegmentValueMatcher(snapshot) {
        const localizeMatcherParams = snapshot.data && snapshot.data.localizeMatcher && snapshot.data.localizeMatcher.params || {};
        const subPathSegments = snapshot.url
            .map((segment) => {
            const currentPath = segment.path;
            const matchedParamName = segment.localizedParamName;
            const val = (matchedParamName && localizeMatcherParams[matchedParamName]) ?
                localizeMatcherParams[matchedParamName](currentPath) : null;
            return val || `${this.parser.getEscapePrefix()}${currentPath}`;
        });
        return subPathSegments;
    }
    /**
     * Translate route to current language
     * If new language is explicitly provided then replace language part in url with new language
     */
    translateRoute(path) {
        if (typeof path === 'string') {
            const url = this.parser.translateRoute(path);
            return !path.indexOf('/') ? this.parser.addPrefixToUrl(url) : url;
        }
        // it's an array
        const result = [];
        path.forEach((segment, index) => {
            if (typeof segment === 'string') {
                const res = this.parser.translateRoute(segment);
                if (!index && !segment.indexOf('/')) {
                    result.push(this.parser.addPrefixToUrl(res));
                }
                else {
                    result.push(res);
                }
            }
            else {
                result.push(segment);
            }
        });
        return result;
    }
    /**
     * Event handler to react on route change
     */
    _routeChanged() {
        return ([previousEvent, currentEvent]) => {
            const previousLang = this.parser.getLocationLang(previousEvent.url) || this.parser.defaultLang;
            const currentLang = this.parser.getLocationLang(currentEvent.url) || this.parser.defaultLang;
            const lastExtras = this.lastExtras;
            if (currentLang !== previousLang && this.latestUrl !== currentEvent.url) {
                this.latestUrl = currentEvent.url;
                this.cancelCurrentNavigation();
                this.parser.translateRoutes(currentLang)
                    .subscribe(() => {
                    // Reset routes again once they are all translated
                    this.applyConfigToRouter(this.parser.routes);
                    // Clear global extras
                    this.lastExtras = undefined;
                    // Init new navigation with same url to take new config in consideration
                    this.router.navigateByUrl(currentEvent.url, lastExtras);
                    // Fire route change event
                    this.routerEvents.next(currentLang);
                });
            }
            this.latestUrl = currentEvent.url;
        };
    }
    /**
     * Drop the current Navigation
     */
    cancelCurrentNavigation() {
        const currentNavigation = this.router.getCurrentNavigation();
        const url = this.router.serializeUrl(currentNavigation.extractedUrl);
        this.router.events.next(new NavigationCancel(currentNavigation.id, url, ''));
        this.router.navigationTransitions.transitions.next({
            ...this.router.navigationTransitions.transitions.getValue(),
            id: 0,
        });
    }
    /**
     * Apply config to Angular RouterModule
     * @param config routes to apply
     */
    applyConfigToRouter(config) {
        this.router.resetConfig(deepCopy(config));
    }
}
LocalizeRouterService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: LocalizeRouterService, deps: [{ token: LocalizeParser }, { token: LocalizeRouterSettings }, { token: Router }, { token: ActivatedRoute }], target: i0.ɵɵFactoryTarget.Injectable });
LocalizeRouterService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: LocalizeRouterService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: LocalizeRouterService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.LocalizeParser, decorators: [{
                    type: Inject,
                    args: [LocalizeParser]
                }] }, { type: i2.LocalizeRouterSettings, decorators: [{
                    type: Inject,
                    args: [LocalizeRouterSettings]
                }] }, { type: i3.Router, decorators: [{
                    type: Inject,
                    args: [Router]
                }] }, { type: i3.ActivatedRoute, decorators: [{
                    type: Inject,
                    args: [ActivatedRoute]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,