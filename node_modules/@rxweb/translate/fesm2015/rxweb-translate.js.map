{"version":3,"file":"rxweb-translate.js","sources":["../../../../packages/translate/core/multilingual-data.ts","../../../../packages/translate/functions/is-object.ts","../../../../packages/translate/functions/extract.ts","../../../../packages/translate/functions/get-value.ts","../../../../packages/translate/core/translate-config-container.ts","../../../../packages/translate/functions/equals.ts","../../../../packages/translate/functions/get-key-name.ts","../../../../packages/translate/const/pipe-config.const.ts","../../../../packages/translate/functions/get-instance-value.ts","../../../../packages/translate/functions/pipe.transformer.ts","../../../../packages/translate/model/translate.model.ts","../../../../packages/translate/service/rx-change-detector-ref.ts","../../../../packages/translate/core/view-ref-container.ts","../../../../packages/translate/functions/define-property.ts","../../../../packages/translate/functions/define-async-property.ts","../../../../packages/translate/functions/override-destroy.ts","../../../../packages/translate/core/translate-container.ts","../../../../packages/translate/functions/replacer.ts","../../../../packages/translate/resolver/base-resolver.ts","../../../../packages/translate/decorators/translate.decorator.ts","../../../../packages/translate/decorators/async-translate.decorator.ts","../../../../packages/translate/core/translation-core.ts","../../../../packages/translate/service/rx-translation.ts","../../../../packages/translate/interface/rx-translate-config.ts","../../../../packages/translate/core/rx-translate-config.const.ts","../../../../packages/translate/resolver/component-multilingual.ts","../../../../packages/translate/directives/rx-translate.directive.ts","../../../../packages/translate/functions/override-property.ts","../../../../packages/translate/functions/override-errors-property.ts","../../../../packages/translate/core/translation-resolver.ts","../../../../packages/translate/pure-pipes/rx-translate.pipe.ts","../../../../packages/translate/module/rx-translate-module.ts","../../../../packages/translate/module/rx-sanitize-module.ts","../../../../packages/translate/decorators/translate-sanitizer.decorator.ts","../../../../packages/translate/rxweb-translate.ts"],"sourcesContent":["import { RxTranslateConfig } from \"../interface/rx-translate-config\";\r\nimport { TranslationModelData } from \"../interface/translation-model-data\";\r\n\r\nexport const MultiLingualData:\r\n    {\r\n        addOrUpdate(key: string, data: { [key: string]: any }, translationName: string, languageCode?: string);\r\n        addOrUpdateComponent(key: string, data: { [key: string]: any }, instance: Function, refMarkedId: number);\r\n        getComponentPropValue(key: string, instance: Function, refMarkedId: number);\r\n        removeComponentPropValue(instance: Function, refMarkedId: number, keyName?: string);\r\n        remove(key: string);\r\n        get(key: string);\r\n        clearInActives(config: RxTranslateConfig);\r\n        getActiveKeys();\r\n        contains(key: string, languageCode: string);\r\n        data: { [key: string]: any };\r\n    } = new (class {\r\n        private translationModelData: Array<TranslationModelData> = new Array<TranslationModelData>();\r\n        data: { [key: string]: any } = {};\r\n        private keys: { [key: string]: boolean } = {};\r\n        private contentKeysByLanguage: { [key: string]: string } = {};\r\n\r\n        addOrUpdate(key: string, data: { [key: string]: any }, translationName: string, languageCode?: string) {\r\n            this.data[key] = data;\r\n            this.keys[translationName] = true;\r\n            if (languageCode)\r\n                this.contentKeysByLanguage[key] = languageCode\r\n        }\r\n\r\n\r\n        addOrUpdateComponent(key: string, data: { [key: string]: any }, instance: Function, refMarkedId: number) {\r\n            let indexOf = this.translationModelData.findIndex(t => t.instance == instance && t.key == key && t.rxRefMarkedId == refMarkedId);\r\n            if (indexOf != -1)\r\n                this.translationModelData[indexOf] = { key: key, data: data, instance: instance, rxRefMarkedId: refMarkedId };\r\n            else\r\n                this.translationModelData.push({ key: key, data: data, instance: instance, rxRefMarkedId: refMarkedId });\r\n        }\r\n\r\n        getComponentPropValue(key: string, instance: Function, refMarkedId: number) {\r\n            let indexOf = this.translationModelData.findIndex(t => t.instance == instance && t.key == key && t.rxRefMarkedId == refMarkedId);\r\n            return indexOf != -1 ? this.translationModelData[indexOf].data : undefined;\r\n        }\r\n\r\n        removeComponentPropValue(instance: Function, refMarkedId: number, keyName?: string) {\r\n            let indexOf = -1;\r\n            if (keyName)\r\n                indexOf = this.translationModelData.findIndex(t => t.instance == instance && t.rxRefMarkedId == refMarkedId && t.key == keyName);\r\n            else {\r\n                let result = this.translationModelData.filter(t => t.instance == instance && t.rxRefMarkedId == refMarkedId);\r\n                for (let data of result) {\r\n                    this.translationModelData.splice(this.translationModelData.indexOf(data), 1)\r\n                }\r\n            }\r\n            return indexOf != -1 ? this.translationModelData.splice(indexOf, 1) : undefined;\r\n        }\r\n\r\n        contains(key: string, languageCode: string) {\r\n            return this.data[key] ? this.contentKeysByLanguage[key] == languageCode : false;\r\n        }\r\n\r\n        get(key: string): string {\r\n            return this.data[key] ? this.data[key] : undefined;\r\n        }\r\n\r\n        clearInActives(config: RxTranslateConfig) {\r\n            if (!config.cacheActiveLanguageObject || (!config.cacheActiveLanguageObject && !config.cacheLanguageWiseObject))\r\n                Object.keys(this.keys).forEach(t => {\r\n                    if (!this.keys[t] && this.data[t]) {\r\n                        delete this.data[t];\r\n                    }\r\n                })\r\n        }\r\n\r\n        getActiveKeys(): string[] {\r\n            return Object.keys(this.keys);\r\n        }\r\n\r\n        remove(key: string) {\r\n            this.keys[key] = undefined;\r\n        }\r\n\r\n    });"," export function isObject(value: any): boolean {\r\n        return Object.prototype.toString.call(value) === '[object Object]';\r\n    }","export function extract([start, end]) {\r\n        const matcher = new RegExp(`${start}(.*?)${end}`, 'gm');\r\n        const normalise = (str) => str.slice(start.length, end.length * -1);\r\n        return function (str) {\r\n            return str.match(matcher).map(normalise);\r\n        }\r\n    }","export function getValue(key,data) {\r\n        let isObjectKey = key.indexOf(\".\") !== -1;\r\n        if (isObjectKey) {\r\n            let keys = key.split('.');\r\n            let jObject = data;\r\n            for (let column of keys) {\r\n                if (jObject[column])\r\n                    jObject = jObject[column]\r\n                else {\r\n                    jObject = \"\";\r\n                    break;\r\n                }\r\n            }\r\n            return jObject;\r\n        }\r\n        let value = data[key];\r\n        return value == undefined ? '' : value;\r\n    }","import { RxTranslateConfig } from \"../interface/rx-translate-config\";\r\nimport { Injector } from \"@angular/core\";\r\nimport { TranslationLoader } from \"../interface/translation-loader\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs\";\r\nexport const translateConfigContainer:\r\n    {\r\n        config: RxTranslateConfig;\r\n        loading: boolean;\r\n        injector: Injector;\r\n        activePageTranslationName: string;\r\n        resolver: Function;\r\n        ngxTranslate: any;\r\n        customLoader: TranslationLoader;\r\n        httpClient: HttpClient;\r\n        globalTranslate: Observable<any>;\r\n    } = new (class {\r\n        config: RxTranslateConfig;\r\n        loading: boolean;\r\n        injector: Injector;\r\n        activePageTranslationName: string;\r\n        resolver: Function;\r\n        ngxTranslate: any;\r\n        customLoader: TranslationLoader;\r\n        httpClient: HttpClient;\r\n        globalTranslate: Observable<any>;\r\n    })();","export function equals(o1: any, o2: any): boolean {\r\n    if (o1 === o2) return true;\r\n    if (o1 === null || o2 === null) return false;\r\n    if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\r\n    let t1 = typeof o1, t2 = typeof o2, length: number, key: any, keySet: any;\r\n    if (t1 == t2 && t1 == 'object') {\r\n        if (Array.isArray(o1)) {\r\n            if (!Array.isArray(o2)) return false;\r\n            if ((length = o1.length) == o2.length) {\r\n                for (key = 0; key < length; key++) {\r\n                    if (!equals(o1[key], o2[key])) return false;\r\n                }\r\n                return true;\r\n            }\r\n        } else {\r\n            if (Array.isArray(o2)) {\r\n                return false;\r\n            }\r\n            keySet = Object.create(null);\r\n            for (key in o1) {\r\n                if (!equals(o1[key], o2[key])) {\r\n                    return false;\r\n                }\r\n                keySet[key] = true;\r\n            }\r\n            for (key in o2) {\r\n                if (!(key in keySet) && typeof o2[key] !== 'undefined') {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}","import { translateConfigContainer } from \"../core/translate-config-container\"\r\nexport function getKeyName(name: string, languageCode?: string, filePath?: string) {\r\n    if (translateConfigContainer.config && translateConfigContainer.config.cacheLanguageWiseObject && (!filePath || (filePath && name == \"global\")))\r\n        return `${name}_${languageCode || translateConfigContainer.config.languageCode}`;\r\n    return name;\r\n}","import { CurrencyPipe, DatePipe, DecimalPipe, I18nPluralPipe, I18nSelectPipe, SlicePipe, LowerCasePipe, UpperCasePipe, PercentPipe, TitleCasePipe } from \"@angular/common\";\r\n\r\nexport const PIPE_CONFIG: { [key: string]: Function } = {\r\n    'currency': CurrencyPipe,\r\n    'date': DatePipe,\r\n    'decimal': DecimalPipe,\r\n    'i18nPlural': I18nPluralPipe,\r\n    'i18nSelect': I18nSelectPipe,\r\n    'slice': SlicePipe,\r\n    'lowercase': LowerCasePipe,\r\n    'uppercase': UpperCasePipe,\r\n    'percent': PercentPipe,\r\n    'titlecase': TitleCasePipe\r\n}","import { getValue } from \"./get-value\";\r\n\r\nexport function getInstanceValue(key: string, componentData: any, parentData: any) {\r\n    let value = \"\";\r\n    if (key.indexOf(\"'\") != 0) {\r\n        value = getValue(key, parentData);\r\n        if (!value)\r\n            value = getValue(key, componentData)\r\n    }\r\n    return value == \"\" ? key.replace(new RegExp(/[']/, \"g\"), \"\") : value;\r\n}","import { translateConfigContainer } from \"../core/translate-config-container\";\r\nimport { PIPE_CONFIG } from \"../const/pipe-config.const\";\r\nimport { getInstanceValue } from \"./get-instance-value\";\r\n\r\nexport function runPipe(text, componentData: any, parentData: any) {\r\n    let pipeName: string = '';\r\n    if (text.indexOf(\"|\") !== -1) {\r\n        let splitText = text.split(\"|\");\r\n        let leftText = getInstanceValue(splitText[0].trim(), componentData, parentData);\r\n        let rightText = splitText[1].split(new RegExp(\":(?=([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)\")).filter(t => t !== undefined).map(t => getInstanceValue(t, componentData, parentData));\r\n        pipeName = rightText[0].trim();\r\n        rightText.splice(0, 1);\r\n        if (translateConfigContainer.injector && pipeName && PIPE_CONFIG[pipeName]) {\r\n            let resolve = translateConfigContainer.injector.get(PIPE_CONFIG[pipeName]);\r\n            text = resolve.transform.apply(resolve, [leftText, ...rightText]);\r\n        }\r\n    }\r\n    return text;\r\n}","import { isObject } from \"../functions/is-object\";\r\nimport { extract } from \"../functions/extract\";\r\nimport { getValue } from \"../functions/get-value\";\r\nimport { translateConfigContainer } from \"../core/translate-config-container\";\r\nimport { equals } from \"../functions/equals\";\r\nimport { MultiLingualData } from \"../core/multilingual-data\";\r\nimport { getKeyName } from \"../functions/get-key-name\";\r\nimport { runPipe } from \"../functions/pipe.transformer\";\r\n\r\nexport class TranslateModel {\r\n    constructor(public raw: { [key: string]: any }, private componentData: any, private modelName, private parentData) {\r\n        let data = raw;\r\n        if (data)\r\n            Object.keys(data).forEach(key => {\r\n                Object.defineProperty(this, key, {\r\n                    get: function () {\r\n                        let text = data[key];\r\n                        if (isObject(text)) {\r\n                            if (!(data[key] instanceof TranslateModel)) {\r\n                                let pData = Object.keys(parentData).length == 0 ? data : parentData;\r\n                                if (!translateConfigContainer.loading)\r\n                                    text = data[key] = new TranslateModel(data[key], componentData, modelName, pData);\r\n                                else\r\n                                    return new TranslateModel(data[key], {}, modelName, pData);\r\n                            } else\r\n                                text = data[key];\r\n                            return text;\r\n                        }\r\n                        return translateConfigContainer.loading ? \"loading...\" : this.transform(data, key, text)\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                })\r\n            })\r\n    }\r\n\r\n    private getKeyValue(keyParamObject: any) {\r\n        let keyValue = {};\r\n        Object.keys(keyParamObject).forEach(key => {\r\n            keyValue[key] = getValue(key, this.componentData);\r\n        })\r\n        return keyValue;\r\n    }\r\n\r\n    private transform(data, key, text) {\r\n        if (this.thisParameter[key])\r\n            return this.getText(data, text, key);\r\n        if (this.keyParameters && this.keyParameters[key] && isObject(this.keyParameters[key])) {\r\n            if (!equals(this.keyParameters[key], this.getKeyValue(this.keyParameters[key])))\r\n                return this.getText(data, text, key);\r\n            else if (this.memoized[key])\r\n                return this.memoized[key];\r\n        }\r\n        if (this.keyParameters && !this.keyParameters[key])\r\n            return this.getText(data, text, key);\r\n        else\r\n            return typeof text === \"function\" ? text() : text;\r\n    }\r\n\r\n    private activeLanguage: any;\r\n\r\n    private keyParameters: { [key: string]: any } = {};\r\n\r\n    private memoized: { [key: string]: string } = {};\r\n\r\n    private thisParameter: { [key: string]: boolean } = {};\r\n\r\n    get languageCode() {\r\n        return translateConfigContainer.config ? translateConfigContainer.config.languageCode : \"en\";\r\n    }\r\n\r\n\r\n    get(key: string) {\r\n        let jObject;\r\n        if (key) {\r\n            var keys = key.split(\".\");\r\n\r\n            for (let column of keys) {\r\n                if (!jObject)\r\n                    jObject = this[column];\r\n                else\r\n                    jObject = jObject[column]\r\n            }\r\n        }\r\n        return jObject;\r\n    }\r\n\r\n    addOrUpdateKey(name: string, value: string | { [key: string]: any }) {\r\n        let keyName = getKeyName(this.modelName, this.languageCode, undefined);\r\n        let data = MultiLingualData.get(keyName);\r\n        if (!isObject(value))\r\n            data[name] = value;\r\n        else if (data[name])\r\n            data[name] = { ...data[name], ...<{ [key: string]: any }>value };\r\n        else\r\n            data[name] = value;\r\n        MultiLingualData.addOrUpdate(keyName, data, this.languageCode);\r\n        MultiLingualData.removeComponentPropValue(this.componentData.constructor, this.componentData[\"__ngContext__\"].rxRefMarkedId,keyName);\r\n    }\r\n\r\n    private ngxTranslateParser(translations: any, key: string) {\r\n        return translateConfigContainer.ngxTranslate[\"getParsedResult\"](translations, key, null);\r\n    }\r\n\r\n    private getText(translations: any, text: string, columnKey: string) {\r\n        text = translateConfigContainer.ngxTranslate ? this.ngxTranslateParser(translations, columnKey) : text;\r\n        if (text.indexOf('this.') !== -1 || text.indexOf('{{{this') !== -1) {\r\n            this.thisParameter[columnKey] = true;\r\n            if (text.indexOf('{{{this') !== -1) {\r\n                let stringExtractor = extract(['{{{', '}}}']);\r\n                let keys = stringExtractor(text)\r\n                keys.forEach(t => {\r\n                    var func = new Function(\"x\", \"return \" + t);\r\n                    let calculatedText = func.call(this.componentData);\r\n                    text = text.replace(`{{{${t}}}}`, calculatedText);\r\n                })\r\n            } else {\r\n                var func = new Function(\"x\", \"return \" + text);\r\n                text = func.call(this.componentData);\r\n            }\r\n            \r\n        }\r\n        if (text && text.indexOf(\"{{\") != -1) {\r\n            let stringExtractor = extract(['{{', '}}']);\r\n            let keys = stringExtractor(text);\r\n            keys.forEach(key => {\r\n                let value = runPipe(key, this.componentData, this.parentData);\r\n                if (key == value) {\r\n                    value = getValue(key, this.parentData);\r\n                    if (!value)\r\n                        value = getValue(key, this.componentData)\r\n                }\r\n                if (!this.keyParameters[columnKey])\r\n                    this.keyParameters[columnKey] = {};\r\n                this.keyParameters[columnKey][key] = value;\r\n                text = text.replace(`{{${key}}}`, value);\r\n            })\r\n            this.memoized[columnKey] = text;\r\n        } else\r\n            this.keyParameters[columnKey] = true;\r\n        return text;\r\n    }\r\n}\r\n","import { ViewRef, ChangeDetectorRef } from \"@angular/core\";\r\nimport { MultiLingualData } from \"../core/multilingual-data\";\r\nconst NG_CONTEXT: string = \"__ngContext__\";\r\nconst NG_ELEMENT_ID: string = \"__NG_ELEMENT_ID__\";\r\nconst LVIEW: string = \"_lView\";\r\nconst CD_REF_INJECTING_VIEW: string = \"_cdRefInjectingView\";\r\nconst CONSTRUCTOR: string = \"constructor\";\r\nexport class RxChangeDetectorRef extends ChangeDetectorRef {\r\n    viewRef: ViewRef;\r\n    constructor(public instance: any) {\r\n        super();\r\n    }\r\n\r\n    createViewRef() {\r\n        if (this.instance[NG_CONTEXT] && this.instance[NG_CONTEXT].rxRefMarkedId === undefined) {\r\n            let emulatedDom = this.instance[NG_CONTEXT][11];\r\n            if (emulatedDom && emulatedDom.component && emulatedDom.component.onPush) {\r\n                this.viewRef = super[CONSTRUCTOR][NG_ELEMENT_ID]();\r\n                this.viewRef[LVIEW] = this.viewRef[CD_REF_INJECTING_VIEW] = this.instance[NG_CONTEXT][14];\r\n            }\r\n            this.setDestroyHooks();\r\n            this.instance[NG_CONTEXT].rxRefMarkedId = Math.random();\r\n        }\r\n        return this.viewRef;\r\n    }\r\n\r\n    setDestroyHooks() {\r\n        let tView = this.instance[NG_CONTEXT][1];\r\n        if (!tView.destroyHooks)\r\n            tView.destroyHooks = [this.instance[NG_CONTEXT].length - 1, () => { MultiLingualData.removeComponentPropValue(this.instance.constructor, this.instance[NG_CONTEXT].rxRefMarkedId) }]\r\n        else\r\n            tView.destroyHooks.push(this.instance[NG_CONTEXT].length - 1, () => {\r\n                MultiLingualData.removeComponentPropValue(this.instance.constructor, this.instance[NG_CONTEXT].rxRefMarkedId)\r\n            });\r\n    }\r\n\r\n\r\n\r\n    markForCheck(): void {\r\n        this.viewRef.markForCheck();\r\n    }\r\n    detach(): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    detectChanges(): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    checkNoChanges(): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    reattach(): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n\r\n}","import { ViewRef, ChangeDetectorRef } from \"@angular/core\";\r\nimport { RxChangeDetectorRef } from \"../service/rx-change-detector-ref\";\r\nconst NG_CONTEXT: string = \"__ngContext__\";\r\nexport const viewRefContainer:\r\n    {\r\n        create(instance: any): number\r\n        markForCheck(): void;\r\n        destroy(markId: number): void;\r\n    } = new (class {\r\n        viewRefs: Array<RxChangeDetectorRef> = new Array<RxChangeDetectorRef>();\r\n        increment: number = 1;\r\n        create(instance: any): number {\r\n            var changeDetector = new RxChangeDetectorRef(instance);\r\n            if (changeDetector.createViewRef())\r\n                this.viewRefs.push(changeDetector);\r\n            return instance[NG_CONTEXT] ? instance[NG_CONTEXT].rxRefMarkedId : 0;\r\n        }\r\n\r\n        markForCheck(): void {\r\n            this.viewRefs.forEach(cd => {\r\n                cd.markForCheck();\r\n            })\r\n        }\r\n\r\n        destroy(instance:any): void {\r\n            if (instance[NG_CONTEXT] && instance[NG_CONTEXT].rxRefMarkedId !== undefined) {\r\n                let indexOf = this.viewRefs.findIndex(t => t.instance[NG_CONTEXT].rxRefMarkedId == instance[NG_CONTEXT].rxRefMarkedId);\r\n                if (indexOf != -1)\r\n                    this.viewRefs.splice(indexOf, 1);\r\n            }\r\n        }\r\n    })();","import { MultiLingualData } from \"../core/multilingual-data\";\r\nimport { TranslateModel } from '../model/translate.model';\r\nimport { getKeyName } from \"./get-key-name\";\r\nimport { translateConfigContainer } from \"../core/translate-config-container\";\r\nimport { viewRefContainer } from \"../core/view-ref-container\";\r\n\r\nexport function defineProperty(model: Function, propertyName: string, modelName: string,languageCode:string,filePath:string) {\r\n    let data = null;\r\n    Object.defineProperty(model.prototype, propertyName, {\r\n        get: function () {\r\n            let keyName = getKeyName(modelName, languageCode, filePath);\r\n            data = MultiLingualData.get(keyName);\r\n            let refMarkedId = this[\"__ngContext__\"] ?  this[\"__ngContext__\"].rxRefMarkedId : 0;\r\n            let translationModelData = MultiLingualData.getComponentPropValue(keyName, this.constructor, refMarkedId );\r\n            if ((data && !translationModelData))\r\n                if (!translateConfigContainer.loading) {\r\n                    refMarkedId  = viewRefContainer.create(this);\r\n                    MultiLingualData.addOrUpdateComponent(keyName, new TranslateModel({ ...data }, this, modelName, {}), this.constructor, refMarkedId);\r\n                }\r\n                else\r\n                    return new TranslateModel(data, {}, modelName, {});\r\n            let value = MultiLingualData.getComponentPropValue(keyName, this.constructor, refMarkedId);\r\n            return value === undefined ? {} : value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    })\r\n}\r\n","import { AsyncTranslateConfig } from \"../interface/async-translate-config\";\r\nimport { translateConfigContainer } from '../core/translate-config-container'\r\nexport function defineAsyncProperty(model: Function, propertyName: string, config: AsyncTranslateConfig) {\r\n    let observable: any = null;\r\n    let service: any = null;\r\n    let currentLanguage: string = null;\r\n    Object.defineProperty(model.prototype, propertyName, {\r\n        get: function () {\r\n            if (!observable || currentLanguage != translateConfigContainer.config.languageCode) {\r\n                if (translateConfigContainer.injector) {\r\n                    currentLanguage = translateConfigContainer.config.languageCode;\r\n                    service = translateConfigContainer.injector.get(config.serviceModel)\r\n                    observable = config.serviceMethod.bind(service).call();\r\n                }\r\n            }else if(currentLanguage != translateConfigContainer.config.languageCode)\r\n                observable = config.serviceMethod.bind(service).call();\r\n            return observable\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    })\r\n}\r\n","import { MultiLingualData } from \"../core/multilingual-data\";\r\nimport { viewRefContainer } from \"../core/view-ref-container\";\r\n\r\nexport function overrideDestroyMethod(model: Function, name: string) {\r\n    let onDestroy = model.prototype.ngOnDestroy;\r\n    model.prototype.ngOnDestroy = function () {\r\n        MultiLingualData.remove(name);\r\n        viewRefContainer.destroy(this);\r\n        if (onDestroy)\r\n            onDestroy.bind(this).call();\r\n    }\r\n}\r\n","import { TranslateConfig } from \"../interface/translate-config\";\r\nimport { TranslateContainerConfig } from \"../interface/translate-container-config\";\r\nimport { defineProperty } from \"../functions/define-property\";\r\nimport { defineAsyncProperty } from \"../functions/define-async-property\";\r\nimport { overrideDestroyMethod } from \"../functions/override-destroy\";\r\nimport { RxTranslateConfig } from \"../interface/rx-translate-config\";\r\nimport { AsyncTranslateConfig } from \"../interface/async-translate-config\";\r\n\r\nexport const translateContainer:\r\n    {\r\n        set(instance: Function, config: TranslateConfig): void;\r\n        getByName(name: string): TranslateContainerConfig;\r\n        get(instance: any): TranslateContainerConfig;\r\n        additionalGet(instance: any): TranslateContainerConfig[];\r\n        defineProperty(instance: Function, propertyName: string, config: TranslateConfig): TranslateContainerConfig;\r\n        defineAsyncProperty(instance: Function, propertyName: string, config: AsyncTranslateConfig): void;\r\n        setComponentState(key: string, instance: Function);\r\n        getComponentState(key: string);\r\n        config: RxTranslateConfig;\r\n        getActiveTranslations(): Array<TranslateContainerConfig>\r\n    } = new (class {\r\n        store: TranslateContainerConfig[] = new Array<TranslateContainerConfig>();\r\n        additionalStore: TranslateContainerConfig[] = new Array<TranslateContainerConfig>();\r\n        config: RxTranslateConfig;\r\n        componentState: { [key: string]: Function } = {};\r\n        set(instance: Function, config: TranslateConfig): void {\r\n            let translateConfig = this.store.filter(t => t.instance == instance)[0]\r\n            if (!translateConfig)\r\n                this.store.push({ instance: instance, config: config });\r\n            else \r\n                this.additionalStore.push({ instance: instance, config: config });\r\n        }\r\n\r\n        get(instance: Function): TranslateContainerConfig {\r\n            let containerConfig = this.store.filter(t => t.instance == instance);\r\n            return containerConfig.length > 0 ?containerConfig[0] : undefined;\r\n        }\r\n\r\n        additionalGet(instance: Function): TranslateContainerConfig[] {\r\n            return this.additionalStore.filter(t => t.instance == instance);\r\n        }\r\n\r\n        getByName(name: string): TranslateContainerConfig {\r\n            let containerConfig = this.store.filter(t => t.config.translationName == name);\r\n            if (containerConfig.length == 0)\r\n                containerConfig = this.additionalStore.filter(t => t.config.translationName == name);\r\n            return containerConfig.length > 0 ? containerConfig[0] : undefined;\r\n        }\r\n\r\n\r\n        defineAsyncProperty(instance: Function, propertyName: string, config: AsyncTranslateConfig) {\r\n            let isPropertyKey = (propertyName != undefined);\r\n            var model: Function = !isPropertyKey ? instance : instance.constructor;\r\n            defineAsyncProperty(model, propertyName, config);\r\n        }\r\n\r\n        defineProperty(instance: Function, propertyName: string, config?: TranslateConfig): TranslateContainerConfig {\r\n            let isPropertyKey = (propertyName != undefined);\r\n            var model: Function = !isPropertyKey ? instance : instance.constructor;\r\n            let modelName = config === undefined ? \"global\" : config.translationName;\r\n            defineProperty(model, propertyName, modelName, config ? config.language : undefined, config ? config.filePath : undefined);\r\n            if (modelName != \"global\" && propertyName) {\r\n                let instanceConfig: TranslateContainerConfig = { instance: model, config: config };\r\n                this.set(model, config)\r\n                let count = this.store.filter(t => t.instance == model).length;\r\n                count = this.additionalStore.filter(t => t.instance == model).length + count;\r\n                if (count == 1)\r\n                    overrideDestroyMethod(model, config.translationName);\r\n                return instanceConfig;\r\n            } else if (!propertyName)\r\n                this.set(model, config);\r\n        }\r\n\r\n        setComponentState(key: string, instance: Function) {\r\n            this.componentState[key] = instance;\r\n        }\r\n\r\n        getComponentState(key: string) {\r\n            return this.componentState[key];\r\n        }\r\n\r\n        getActiveTranslations() {\r\n            return this.store;\r\n        }\r\n    })();","import { extract } from \"../functions/extract\";\r\nimport { getValue } from \"../functions/get-value\";\r\n\r\nexport function replacer(extractKeys: any, text: string, data: { [key: string]: any }): string {\r\n    if (text && text.indexOf(\"{{\") != -1) {\r\n        let extractor = extract(extractKeys);\r\n        let keys = extractor(text);\r\n        keys.forEach(key => {\r\n            text = text.replace(`{{${key}}}`, getValue(key, data));\r\n        })\r\n    }\r\n    return text;\r\n}","import { TranslateContainerConfig } from \"../interface/translate-container-config\";\r\nimport { MultiLingualData } from \"../core/multilingual-data\";\r\nimport { translateContainer } from \"../core/translate-container\";\r\nimport { RxTranslateConfig } from \"../interface/rx-translate-config\";\r\nimport { ActivatedRouteSnapshot } from \"@angular/router\";\r\nimport { extract } from \"../functions/extract\";\r\nimport { getValue } from \"../functions/get-value\";\r\nimport { translateConfigContainer } from \"../core/translate-config-container\";\r\nimport { getKeyName } from \"../functions/get-key-name\";\r\nimport { Observable, of, Subscription, forkJoin } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { replacer } from \"../functions/replacer\";\r\nexport class BaseResolver {\r\n    constructor(private baseConfig: RxTranslateConfig, private httpClient: HttpClient) {\r\n        this.cloneBaseConfig = { ...baseConfig };\r\n    }\r\n    cloneBaseConfig: RxTranslateConfig;\r\n    xhr: XMLHttpRequest;\r\n    containerConfig: TranslateContainerConfig;\r\n    loadEventFunction: any;\r\n\r\n    resolveGlobal(config: TranslateContainerConfig, isGlobal: boolean = true) {\r\n        if (isGlobal)\r\n            translateContainer.set(config.instance, config.config);\r\n        if ((isGlobal && !this.baseConfig.forNgxTranslate) || !isGlobal) {\r\n            translateConfigContainer.globalTranslate = this.resolve(config);\r\n            translateConfigContainer.globalTranslate.subscribe(t => {\r\n                translateConfigContainer.globalTranslate = undefined;\r\n            });\r\n        }\r\n    }\r\n\r\n    resolve(config: TranslateContainerConfig, languageCode: string = \"\", isRouteLanguageChanged: boolean = false): Observable<boolean> {\r\n        let containerConfig = config;\r\n        if ((containerConfig && this.cloneBaseConfig.isTest) || (containerConfig && !MultiLingualData.contains(getKeyName(containerConfig.config.translationName, languageCode || this.cloneBaseConfig.languageCode), languageCode || this.cloneBaseConfig.languageCode)) || (containerConfig && isRouteLanguageChanged)) {\r\n            let lang: any = containerConfig.config.language || languageCode || this.cloneBaseConfig.languageCode;\r\n            if (containerConfig.config.inlineTranslations && containerConfig.config.inlineTranslations[lang]) {\r\n                return Observable.create((subcriber) => {\r\n                    containerConfig.config.inlineTranslations[lang]().then(t => { subcriber.next(t.default); subcriber.complete() });\r\n                }).pipe(map(this.setData(lang, containerConfig).bind(this)))\r\n            }\r\n            else if (!translateConfigContainer.customLoader) {\r\n                let url = this.getPath(containerConfig, languageCode);\r\n                if (url)\r\n                    return this.httpClient.get(url).pipe(map(this.setData(lang, containerConfig).bind(this)));\r\n            } else {\r\n                let translationObject = lang;\r\n                if (config.config.translationName != \"global\")\r\n                    translationObject = { ...config.config, ...{ filePath: this.getPath(containerConfig, languageCode), lang: lang } };\r\n                return translateConfigContainer.customLoader.getTranslation(translationObject).pipe(map(this.setData(lang, containerConfig).bind(this)))\r\n            }\r\n        }\r\n        else if ((containerConfig && MultiLingualData.contains(getKeyName(containerConfig.config.translationName, languageCode || this.cloneBaseConfig.languageCode), languageCode || this.cloneBaseConfig.languageCode))) {\r\n            let body = MultiLingualData.get(getKeyName(containerConfig.config.translationName, languageCode || this.cloneBaseConfig.languageCode))\r\n            this.setTitle(body, containerConfig);\r\n        }\r\n        return of(true);\r\n\r\n    }\r\n\r\n    setTitle(body, containerConfig: TranslateContainerConfig) {\r\n        if (translateConfigContainer.activePageTranslationName == containerConfig.config.translationName)\r\n            this.setPageTitle(body);\r\n    }\r\n\r\n    setData(languageCode: string, containerConfig: TranslateContainerConfig) {\r\n        return body => {\r\n            let name = getKeyName(containerConfig.config.translationName, languageCode || this.cloneBaseConfig.languageCode, containerConfig.config.filePath);\r\n            let data = body;\r\n            if (translateConfigContainer.resolver)\r\n                data = translateConfigContainer.resolver(name.replace(\"global_\", \"\").replace(\"global\", \"\"), data);\r\n            MultiLingualData.addOrUpdate(name, data, containerConfig.config.translationName, this.cloneBaseConfig.languageCode);\r\n            this.setTitle(body, containerConfig)\r\n            setTimeout(() => { MultiLingualData.clearInActives(this.cloneBaseConfig) }, 10);\r\n            return body;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    getPath(containerConfig: TranslateContainerConfig, languageCode: string = \"\") {\r\n        let url = '';\r\n        let splitKeywords = ['{{', '}}'];\r\n        languageCode = containerConfig.config.language || languageCode || this.cloneBaseConfig.languageCode;\r\n        if (containerConfig.config.filePath || this.cloneBaseConfig.filePath) {\r\n            if (containerConfig.config.filePath) {\r\n                let text = replacer(splitKeywords, containerConfig.config.filePath, { \"language-code\": languageCode, \"translation-name\": containerConfig.config.translationName })\r\n                url = `/${text}`;\r\n            }\r\n            else {\r\n                let text = replacer(splitKeywords, this.cloneBaseConfig.filePath, { \"language-code\": languageCode, \"translation-name\": containerConfig.config.translationName })\r\n                url = `/${text}`;\r\n            }\r\n        }\r\n        return url\r\n    }\r\n\r\n    resolveRoute(route: ActivatedRouteSnapshot) {\r\n        if (route.component) {\r\n            let isRouteLanguageChanged = route.params && route.params[\"languageCode\"] && route.params[\"languageCode\"] != this.cloneBaseConfig.languageCode;\r\n            let containerConfig = translateContainer.get(route.component);\r\n            if (isRouteLanguageChanged) {\r\n                this.updateLanguageByParam(route);\r\n                this.cloneBaseConfig.languageCode = route.params[\"languageCode\"];\r\n                translateConfigContainer.loading = true;\r\n            }\r\n            if (containerConfig) {\r\n                if (containerConfig.config)\r\n                    translateConfigContainer.activePageTranslationName = containerConfig.config.translationName;\r\n                return this.resolveData(containerConfig, '', isRouteLanguageChanged)\r\n            } else\r\n                if (isRouteLanguageChanged && translateConfigContainer.ngxTranslate) {\r\n                    translateConfigContainer.ngxTranslate.use(route.params[\"languageCode\"]);\r\n                    translateConfigContainer.loading = false;\r\n                }\r\n        }\r\n        return of(true);\r\n    }\r\n\r\n    resolveData(containerConfig: TranslateContainerConfig, languageCode: string, isRouteLanguageChanged: boolean = false) {\r\n        let additionalContainerConfigs = translateContainer.additionalGet(containerConfig.instance);\r\n        let observables = new Array<Observable<any>>();\r\n        additionalContainerConfigs.forEach(config => {\r\n            observables.push(this.resolve(config, languageCode, isRouteLanguageChanged));\r\n        })\r\n        observables.push(this.resolve(containerConfig, languageCode, isRouteLanguageChanged))\r\n        return forkJoin(observables).pipe(map((response: any) => {\r\n            this.baseConfig.languageCode = this.cloneBaseConfig.languageCode;\r\n            translateConfigContainer.loading = false;\r\n            if (isRouteLanguageChanged && translateConfigContainer.ngxTranslate)\r\n                translateConfigContainer.ngxTranslate.use(this.baseConfig.languageCode);\r\n            return true;\r\n        }))\r\n    }\r\n\r\n    updateLanguageByParam(route: ActivatedRouteSnapshot) {\r\n        if (route.params && route.params[\"languageCode\"] && (!this.baseConfig.languageCode || this.baseConfig.languageCode !== route.params[\"languageCode\"])) {\r\n            setTimeout(() => this.languageChanged(route.params[\"languageCode\"]), 10)\r\n        }\r\n    }\r\n\r\n    languageChanged(languageCode: string, onComplete?: Function) {\r\n        let keys = this.getKeys(this.baseConfig.languageCode);\r\n        this.cloneBaseConfig.languageCode = languageCode;\r\n        this.changeTranslation(keys, 0, onComplete);\r\n    }\r\n\r\n    resolveByName(name: string, languageCode: string = null) {\r\n        let containerConfig = translateContainer.getByName(name);\r\n        return this.resolve(containerConfig, languageCode);\r\n    }\r\n    fakeResolveByName(name: string, fakeData: any, resolve: Function) {\r\n    }\r\n    private getKeys(languageCode: string) {\r\n        return MultiLingualData.getActiveKeys().map(key => {\r\n            return key.replace(`_${languageCode}`, '');\r\n        });\r\n    }\r\n\r\n    private changeTranslation(keys, index, onComplete?: Function) {\r\n        if (keys.length > index) {\r\n            translateConfigContainer.loading = true;\r\n            var baseResolver = new BaseResolver(this.cloneBaseConfig, this.httpClient);\r\n            baseResolver.resolveByName(keys[index]).subscribe(x => {\r\n                let nextIndex = index + 1;\r\n                this.changeTranslation(keys, nextIndex, onComplete);\r\n            });\r\n        } else {\r\n            translateConfigContainer.config.languageCode = this.cloneBaseConfig.languageCode;\r\n            translateConfigContainer.loading = false;\r\n            if (onComplete)\r\n                onComplete();\r\n        }\r\n    }\r\n\r\n    private setPageTitle(body: { [key: string]: string }) {\r\n        if (body && body[\"pageTitle\"])\r\n            document.title = body[\"pageTitle\"];\r\n    }\r\n\r\n\r\n}","import { TranslateConfig } from \"../interface/translate-config\";\r\nimport { translateContainer } from \"../core/translate-container\";\r\nimport { translateConfigContainer } from \"../core/translate-config-container\";\r\nimport { BaseResolver } from \"../resolver/base-resolver\"\r\nexport function translate(config?: TranslateConfig) {\r\n    return function (\r\n        target: any,\r\n        propertyKey: string, parameterIndex?: any\r\n    ) {\r\n        let instanceConfig = translateContainer.defineProperty(target, propertyKey, config)\r\n        if (translateConfigContainer.config && translateConfigContainer.config.preloadingStrategy && instanceConfig != undefined) {\r\n            var baseResolver = new BaseResolver(translateConfigContainer.config, translateConfigContainer.httpClient);\r\n            baseResolver.resolveGlobal(instanceConfig,false);\r\n        }\r\n    }\r\n}\r\n\r\n","import { translateContainer } from \"../core/translate-container\";\r\nimport { AsyncTranslateConfig } from \"../interface/async-translate-config\";\r\n\r\nexport function asyncTranslate(config?: AsyncTranslateConfig) {\r\n    return function (\r\n        target: any,\r\n        propertyKey: string, parameterIndex?: any\r\n    ) {\r\n        translateContainer.defineAsyncProperty(target, propertyKey, config)\r\n    }\r\n}\r\n\r\n","import { getKeyName } from \"../functions/get-key-name\";\r\nimport { MultiLingualData } from \"./multilingual-data\";\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nexport const TranslationCore:\r\n    {\r\n        languageChangedSubject: Subject<boolean>;\r\n        languageChanged: Observable<boolean>;\r\n        getText(path: string);\r\n    } = new (class {\r\n        languageChangedSubject: Subject<boolean> = new Subject<boolean>();\r\n        languageChanged: Observable<boolean> = this.languageChangedSubject.asObservable();\r\n\r\n        getText(path: string) {\r\n            let splitText = path.split('.');\r\n            let keyName = getKeyName(splitText[0]);\r\n            let data = MultiLingualData.get(keyName);\r\n            let text = '';\r\n            if (data) {\r\n                splitText.splice(0, 1);\r\n                for (var col of splitText)\r\n                    text = text ? text[col] : data[col];\r\n            }\r\n            return text;\r\n        }\r\n    });","import { translateConfigContainer } from '../core/translate-config-container'\r\nimport { extract } from \"../functions/extract\";\r\nimport { getValue } from \"../functions/get-value\";\r\nimport { BaseResolver } from \"../resolver/base-resolver\";\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, ApplicationRef } from '@angular/core';\r\nimport { viewRefContainer } from '../core/view-ref-container';\r\nimport { TranslationCore } from '../core/translation-core';\r\n@Injectable()\r\nexport class RxTranslation {\r\n    constructor(private httpClient: HttpClient, private ref: ApplicationRef) {\r\n    }\r\n    get language() {\r\n        return translateConfigContainer.config.languageCode;\r\n    }\r\n\r\n    change(languageCode: string, onComplete?: Function) {\r\n        var baseResolver = new BaseResolver(translateConfigContainer.config, this.httpClient);\r\n        baseResolver.languageChanged(languageCode, () => { viewRefContainer.markForCheck(); if (onComplete) onComplete(); TranslationCore.languageChangedSubject.next(true); });\r\n    }\r\n\r\n\r\n    translate(text: string, data: { [key: string]: any }) {\r\n        let extractor = extract(['{', '}']);\r\n        let keys = extractor(text);\r\n        keys.forEach(key => {\r\n            text = text.replace(`{${key}}`, getValue(key, data));\r\n        })\r\n        return text;\r\n    }\r\n}","import { ErrorMessageConfig } from \"./error-message-config\";\r\n\r\nexport class RxTranslateConfig {\r\n    languageCode?: string;\r\n    filePath?: string;\r\n    cacheActiveLanguageObject?: boolean;\r\n    cacheLanguageWiseObject?: boolean;\r\n    globalFilePath?: string;\r\n    preloadingStrategy?: boolean;\r\n    controlErrorMessage?: ErrorMessageConfig;\r\n    forNgxTranslate?: boolean;\r\n    allowedLanguages?: string[] = [];\r\n    loader?: any;\r\n    isTest?: boolean;\r\n}","export const RX_TRANSLATE_CONFIG: string = \"rxTranslateConfig\";\r\n\r\nexport const CUSTOM_LOADER: string = \"customLoader\";","import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, CanActivateChild } from \"@angular/router\";\r\nimport { BaseResolver } from \"./base-resolver\";\r\nimport { Inject, Injector, Injectable } from \"@angular/core\";\r\nimport { RxTranslateConfig } from \"../interface/rx-translate-config\";\r\nimport { translateConfigContainer } from '../core/translate-config-container'\r\nimport { RX_TRANSLATE_CONFIG, CUSTOM_LOADER } from \"../core/rx-translate-config.const\";\r\nimport { Title } from \"@angular/platform-browser\";\r\nimport { TranslationLoader } from \"../interface/translation-loader\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class ComponentGuard extends BaseResolver implements CanActivate, CanActivateChild {\r\n\r\n    constructor(@Inject(RX_TRANSLATE_CONFIG) config: RxTranslateConfig, injector: Injector, @Inject(CUSTOM_LOADER) customLoader: TranslationLoader, httpClient: HttpClient) { super(config, httpClient); translateConfigContainer.injector = injector; if (!translateConfigContainer.customLoader) translateConfigContainer.customLoader = customLoader; }\r\n\r\n\r\n    canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n        return this.resolveGlobalTranslate(childRoute);\r\n    }\r\n    \r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n        return this.resolveGlobalTranslate(route);\r\n    }\r\n\r\n    private resolveGlobalTranslate(route: ActivatedRouteSnapshot) {\r\n        this.cloneBaseConfig = { ...translateConfigContainer.config };\r\n        if (translateConfigContainer.globalTranslate) {\r\n            return Observable.create(subscriber => {\r\n                translateConfigContainer.globalTranslate.subscribe(t => {\r\n                    this.resolveRoute(route).subscribe(x => { subscriber.next(x); subscriber.complete() });\r\n                })\r\n            })\r\n        } else\r\n            return this.resolveRoute(route);\r\n    }\r\n\r\n    \r\n}\r\n","import { Injector, Directive,  EmbeddedViewRef, ViewContainerRef, TemplateRef, Input, ElementRef, Inject, OnDestroy } from \"@angular/core\";\r\nimport { NgIfContext } from \"@angular/common\";\r\nimport { translateContainer } from \"../core/translate-container\";\r\nimport { TranslateContainerConfig } from \"../interface/translate-container-config\";\r\nimport { BaseResolver } from \"../resolver/base-resolver\";\r\nimport { RxTranslateConfig } from \"../interface/rx-translate-config\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { RX_TRANSLATE_CONFIG } from \"../core/rx-translate-config.const\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { viewRefContainer } from \"../core/view-ref-container\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { translateConfigContainer } from \"../core/translate-config-container\";\r\n\r\n@Directive({\r\n    selector: '[rxTranslate]'\r\n})\r\nexport class RxTranslateDirective implements OnDestroy {\r\n    \r\n    private viewRef: EmbeddedViewRef<any> | null = null;\r\n    private _context: NgIfContext = new NgIfContext();\r\n    private config: TranslateContainerConfig;\r\n    private component: any;\r\n    private subscription: Subscription;\r\n    private baseConfig: any;\r\n    constructor(private viewContainerRef: ViewContainerRef, private templateRef: TemplateRef<any>, private injector: Injector, @Inject(RX_TRANSLATE_CONFIG) baseConfig: RxTranslateConfig, private route: ActivatedRoute, private httpClient: HttpClient) {\r\n        let ref: any = this.templateRef;\r\n        this.baseConfig = translateConfigContainer.config.forNgxTranslate ? translateConfigContainer.config : baseConfig;\r\n        let elementName = null;\r\n        if (ref._def) {\r\n            elementName = ref._def.element.template.nodes[0].element.name\r\n            let node = ref._def.element.template.nodes[ref._def.element.template.nodes.length - 1];\r\n            this.component = node.provider.token;\r\n            this.config = translateContainer.get(node.provider.token);\r\n        } else if (ref._declarationTContainer) {\r\n            let tagName = ref._declarationTContainer.tagName;\r\n            elementName = tagName.toLowerCase();\r\n            let tView = ref._declarationTContainer.tView_ || ref._declarationTContainer.tViews;\r\n            let node = tView.directiveRegistry.filter(t => t.selectors.filter(y => y == tagName)[0] != undefined)[0];\r\n            if (node) {\r\n                this.config = translateContainer.get(node.type);\r\n                this.component = node.type;\r\n            }\r\n        }\r\n        if (baseConfig.forNgxTranslate && this.component && elementName)\r\n            translateContainer.setComponentState(elementName, this.component);\r\n    }\r\n\r\n    @Input('rxTranslate') set translate(value: any) {\r\n        if (this.config)\r\n        {\r\n            let baseResolver = new BaseResolver(this.baseConfig, this.httpClient);\r\n            let languageCode = \"\";\r\n            if (this.route.params && this.route.params[\"languageCode\"] && this.baseConfig.languageCode !== this.route.params[\"languageCode\"] && !this.config.config.language)\r\n                languageCode = this.route.params[\"languageCode\"];\r\n            this.subscription = baseResolver.resolveData(this.config, languageCode).subscribe(x => {\r\n                this.updateView(x);\r\n            });\r\n        }\r\n        else\r\n            this.updateView(true)\r\n    }\r\n\r\n    \r\n\r\n    private updateView(value: boolean) {\r\n        if (this.viewRef) {\r\n            this.viewContainerRef.clear();\r\n            this.viewRef = null;\r\n        }\r\n        if (value)\r\n            this.viewRef = this.viewContainerRef.createEmbeddedView(this.templateRef, this._context);\r\n        else\r\n            this.viewContainerRef.clear();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.subscription)\r\n            this.subscription.unsubscribe();\r\n        viewRefContainer.destroy(this.component);\r\n    }\r\n}","import { ActivatedRouteSnapshot } from \"@angular/router\";\r\nimport { ComponentGuard } from \"../resolver\";\r\n\r\nexport function overrideProperty() {\r\n    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"routeConfig\", {\r\n        get: function () { return this.cloneSnap; },\r\n        set: function (v) {\r\n            this.cloneSnap = v;\r\n            if (this.cloneSnap && !this.cloneSnap.canActivate) {\r\n                this.cloneSnap.canActivate = [ComponentGuard];\r\n            }\r\n            else if (this.cloneSnap && this.cloneSnap.canActivate) {\r\n                if (this.cloneSnap.canActivate.filter(t => t == ComponentGuard).length == 0) {\r\n                    this.cloneSnap.canActivate.push(ComponentGuard);\r\n                }\r\n\r\n            }\r\n            if (this.cloneSnap && this.cloneSnap.children) {\r\n                if (this.cloneSnap && !this.cloneSnap.canActivateChild) {\r\n                    this.cloneSnap.canActivateChild = [ComponentGuard];\r\n                }\r\n                else if (this.cloneSnap && this.cloneSnap.canActivateChild) {\r\n                    if (this.cloneSnap.canActivateChild.filter(t => t== ComponentGuard).length == 0)\r\n                        this.cloneSnap.canActivateChild.push(ComponentGuard);\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    })\r\n}","import { AbstractControl } from \"@angular/forms\"\r\nimport { getKeyName } from \"./get-key-name\";\r\nimport { MultiLingualData } from \"../core/multilingual-data\";\r\nimport { getValue } from \"./get-value\";\r\nimport { ErrorMessageConfig } from \"../interface/error-message-config\";\r\nimport { translateConfigContainer } from \"../core/translate-config-container\";\r\nimport { isObject } from \"./is-object\";\r\nimport { runPipe } from \"./pipe.transformer\";\r\nimport { extract } from \"./extract\";\r\nconst NOT_IN: string[] = [\"min\", \"max\"];\r\n\r\nexport function overrideErrorsProperty(errorMessageConfig: ErrorMessageConfig) {\r\n    let language = translateConfigContainer.config.languageCode;\r\n    Object.defineProperty(AbstractControl.prototype, \"errors\", {\r\n        get: function () {\r\n            if (this.originalErrors && this.originalErrors.languageCode != translateConfigContainer.config.languageCode) {\r\n                this.cloneErrors = getTranslatedErrorMessages(errorMessageConfig, Object.assign({}, this.originalErrors), this.value);\r\n            }\r\n            return this.cloneErrors;\r\n        },\r\n        set: function (v) {\r\n            this.originalErrors = v;\r\n            this.cloneErrors = v;\r\n            if (v && isObject(v))\r\n                this.cloneErrors = getTranslatedErrorMessages(errorMessageConfig, { ...v },this.value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n\r\n}\r\n\r\nfunction getTranslatedErrorMessages(errorMessageConfig: ErrorMessageConfig, errors: any,value:any) {\r\n    let keyName = getKeyName(\"global\");\r\n    let data = MultiLingualData.get(keyName);\r\n    if (data) {\r\n        data = errorMessageConfig.path == \"\" ? data : getValue(errorMessageConfig.path, data);\r\n        if (errors && isObject(errors)) {\r\n            Object.keys(errors).forEach(key => {\r\n                if (errors[key]) {\r\n                    let message = '';\r\n                    if (data[key])\r\n                        message = getMessage(data,key);\r\n                    if (message) {\r\n\r\n                        Object.keys(errors[key]).forEach(t => {\r\n                            if (Array.isArray(errors[key][t])) {\r\n                                errors[key][t].forEach((x, i) => {\r\n                                    message = message.replace(`{{${i}}}`, errors[key][t][i]);\r\n                                });\r\n                            } else\r\n                                message = message.replace(`{{${t}}}`, errors[key][t]);\r\n                        })\r\n                        value = value ? value : '';\r\n                        message = message.replace(`{{value}}`, value);\r\n                    }\r\n                    if (!isObject(errors[key]))\r\n                        errors[key] = {};\r\n                    errors[key][\"message\"] = message;\r\n\r\n                }\r\n            });\r\n            errors[\"languageCode\"] = translateConfigContainer.config.languageCode;\r\n        }\r\n    }\r\n    return errors;\r\n}\r\n\r\nfunction getMessage(data, key) {\r\n    let text = data[key];\r\n    if (text.indexOf('{{') !== -1) {\r\n        let stringExtractor = extract(['{{', '}}']);\r\n        let keys = stringExtractor(text);\r\n        keys.forEach(key => {\r\n            let value = runPipe(key, data, data);\r\n            if (key == value && NOT_IN.indexOf(key) == -1) {\r\n                value = getValue(key, data);\r\n                if (value) {\r\n                    text = text.replace(`{{${key}}}`, value);\r\n                }\r\n            }\r\n        })\r\n    }\r\n    return text;\r\n}","import { translateContainer } from \"./translate-container\";\r\nimport { getKeyName } from '../functions/get-key-name'\r\nimport { MultiLingualData } from '../core/multilingual-data'\r\nimport { BaseResolver } from '../resolver/base-resolver'\r\nimport { translateConfigContainer } from '../core/translate-config-container'\r\nimport { HttpClient } from \"@angular/common/http\"\r\nimport { Injectable } from \"@angular/core\";\r\nimport { ErrorMessageConfig } from \"../interface/error-message-config\";\r\nimport { overrideErrorsProperty } from \"../functions/override-errors-property\";\r\n@Injectable()\r\nexport class TranslationResolver {\r\n    constructor(private httpClient:HttpClient) {\r\n\r\n    }\r\n\r\n    private _allowedLanguages: Array<string> = [];\r\n\r\n    set controlErrorMessage(value: ErrorMessageConfig) {\r\n        if (translateConfigContainer.config && !translateConfigContainer.config.controlErrorMessage) {\r\n            translateConfigContainer.config.controlErrorMessage = value;\r\n            overrideErrorsProperty(translateConfigContainer.config.controlErrorMessage);\r\n        }\r\n        \r\n    }\r\n\r\n    set resolver(value: Function) {\r\n        translateConfigContainer.resolver = value;\r\n    }\r\n\r\n    get allowedLanguages() {\r\n        return this._allowedLanguages;\r\n    }\r\n\r\n    get activeTranslationsLength() {\r\n        return translateContainer.getActiveTranslations().length;\r\n    }\r\n\r\n    set ngxTranslate(value: any) {\r\n        translateConfigContainer.ngxTranslate = value;\r\n        translateConfigContainer.customLoader = value.customLoader;\r\n    }\r\n\r\n    get injector() {\r\n        return translateConfigContainer.injector;\r\n    }\r\n    get pending() {\r\n        return translateConfigContainer.loading;\r\n    }\r\n\r\n    get activeLanguage() {\r\n        return translateConfigContainer.config.languageCode;\r\n    }\r\n\r\n    set activeLanguage(lang:string) {\r\n        translateConfigContainer.config.languageCode=lang;\r\n    }\r\n\r\n\r\n    get translations() {\r\n        return MultiLingualData.data;\r\n    }\r\n\r\n    getTranslationName(nodeName: string,languageCode:string = null) {\r\n        let instance = translateContainer.getComponentState(nodeName);\r\n        if (instance) {\r\n            let translateConfig = translateContainer.get(instance);\r\n            if (translateConfig && translateConfig.config)\r\n                return getKeyName(translateConfig.config.translationName, languageCode);\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n\r\n    getTranslationNameByInstance(instance: any, languageCode: string = null) {\r\n        let translateConfig = translateContainer.get(instance);\r\n        if (translateConfig && translateConfig.config)\r\n            return getKeyName(translateConfig.config.translationName, languageCode);\r\n        return null;\r\n    }\r\n\r\n    get(modelName: string, languageCode: string = '') {\r\n        return MultiLingualData.get(this.getKeyName(modelName,languageCode));\r\n    }\r\n\r\n    getKeyName(modelName: string, languageCode: string = '') {\r\n        return getKeyName(modelName, languageCode);\r\n    }\r\n    resolve(modelName, languageCode: string) {\r\n        var baseResolver = new BaseResolver(translateConfigContainer.config, this.httpClient);\r\n        return baseResolver.resolveByName(modelName, languageCode);\r\n    }\r\n\r\n    addConfig(name: string) {\r\n        let containerConfig = translateContainer.getByName(name);\r\n        if (!containerConfig)\r\n            translateContainer.set(null, { translationName: name });\r\n        \r\n    }\r\n}","import { Pipe, PipeTransform } from \"@angular/core\";\r\nimport { extract } from \"../functions/extract\";\r\nimport { getValue } from \"../functions/get-value\";\r\n\r\n@Pipe({ name: 'rxTranslate' })\r\nexport class RxTranslatePipe implements PipeTransform {\r\n    transform(text: string, params: {[key:string]:any}): string {\r\n        if (text && params && Object.keys(params).length > 0) {\r\n            if (text.indexOf('{{{this') !== -1) {\r\n                let stringExtractor = extract(['{{{', '}}}']);\r\n                let keys = stringExtractor(text)\r\n                keys.forEach(t => {\r\n                    var func = new Function(\"x\", \"return \" + t);\r\n                    let calculatedText = func.call(params);\r\n                    text = text.replace(`{{{${t}}}}`, calculatedText);\r\n                })\r\n            }\r\n            if (text && text.indexOf(\"{{\") != -1) {\r\n                let stringExtractor = extract(['{{', '}}']);\r\n                let keys = stringExtractor(text);\r\n                keys.forEach(key => {\r\n                    let value = getValue(key, params);\r\n                    text = text.replace(`{{${key}}}`, value);\r\n                })\r\n            }\r\n        }\r\n        return text;\r\n    }\r\n}","import { ComponentGuard } from \"../resolver/component-multilingual\";\r\nimport { NgModule, ModuleWithProviders, Inject } from \"@angular/core\";\r\nimport { RxTranslateConfig } from \"../interface/rx-translate-config\";\r\n\r\nimport { RxTranslateDirective } from \"../directives/rx-translate.directive\";\r\nimport { BaseResolver } from \"../resolver/base-resolver\";\r\nimport { overrideProperty } from \"../functions\";\r\nimport { RouterModule } from \"@angular/router\";\r\n\r\nimport { translateConfigContainer } from \"../core/translate-config-container\";\r\nimport { RxTranslation } from \"../service/rx-translation\";\r\nimport { RX_TRANSLATE_CONFIG, CUSTOM_LOADER } from \"../core/rx-translate-config.const\";\r\nimport { overrideErrorsProperty } from \"../functions/override-errors-property\";\r\nimport { TranslationResolver } from \"../core/translation-resolver\";\r\nimport { HttpClientModule, HttpClient } from \"@angular/common/http\";\r\nimport { RxTranslatePipe } from \"../pure-pipes/rx-translate.pipe\";\r\n\r\n@NgModule({\r\n    imports: [RouterModule, HttpClientModule],\r\n    declarations: [RxTranslateDirective, RxTranslatePipe],\r\n    providers: [ComponentGuard, RxTranslation, TranslationResolver,{ provide: CUSTOM_LOADER, useValue: null }],\r\n    exports: [RxTranslateDirective, RxTranslatePipe],\r\n})\r\nexport class RxTranslateModule {\r\n    constructor(@Inject(RX_TRANSLATE_CONFIG) config: RxTranslateConfig, httpClient: HttpClient,) {\r\n        if (!translateConfigContainer.config) {\r\n            translateConfigContainer.httpClient = httpClient;\r\n            translateConfigContainer.config = config;\r\n            if (!translateConfigContainer.config.languageCode)\r\n                translateConfigContainer.config.languageCode = \"en\";\r\n            let translateConfig = { config: { translationName: 'global', filePath: config.globalFilePath }, instance: null };\r\n            var baseResolver = new BaseResolver(config, httpClient);\r\n            baseResolver.resolveGlobal(translateConfig);\r\n            overrideProperty();\r\n            if (config.controlErrorMessage)\r\n                overrideErrorsProperty(config.controlErrorMessage);\r\n        }\r\n\r\n    }\r\n    static forRoot(config?: RxTranslateConfig): ModuleWithProviders<RxTranslateModule> {\r\n        return {\r\n            ngModule: RxTranslateModule,\r\n            providers: [\r\n                ComponentGuard, RxTranslation,\r\n                { provide: RX_TRANSLATE_CONFIG, useValue: config },\r\n                config.loader ? { provide: CUSTOM_LOADER, useClass: <any>config.loader } : { provide: CUSTOM_LOADER, useValue: null },\r\n            ]\r\n        };\r\n    }\r\n\r\n\r\n}","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule, CurrencyPipe, DatePipe, DecimalPipe, I18nPluralPipe, I18nSelectPipe, LowerCasePipe, PercentPipe, SlicePipe, TitleCasePipe, UpperCasePipe } from \"@angular/common\";\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    providers: [CurrencyPipe, DatePipe, DecimalPipe, I18nPluralPipe, I18nSelectPipe, LowerCasePipe, PercentPipe, SlicePipe, TitleCasePipe, UpperCasePipe],\r\n})\r\nexport class RxTranslateSanitizeModule {\r\n}","import { SanitizeConfig } from \"../interface/sanitize-config\";\r\nimport { PIPE_CONFIG } from \"../const/pipe-config.const\";\r\n\r\nexport function sanitize(config: SanitizeConfig ) {\r\n    return function (\r\n        target: any,\r\n    ) {\r\n        PIPE_CONFIG[config.name] = target;\r\n    }\r\n}\r\n\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {CUSTOM_LOADER as ɵc,RX_TRANSLATE_CONFIG as ɵb} from './core/rx-translate-config.const';\nexport {RxTranslateDirective as ɵa} from './directives/rx-translate.directive';\nexport {RxTranslateConfig as ɵd} from './interface/rx-translate-config';\nexport {TranslationLoader as ɵg} from './interface/translation-loader';\nexport {BaseResolver as ɵf} from './resolver/base-resolver';\nexport {ComponentGuard as ɵe} from './resolver/component-multilingual';"],"names":["NG_CONTEXT"],"mappings":"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"}