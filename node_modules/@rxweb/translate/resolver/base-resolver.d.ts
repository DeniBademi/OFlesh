import { TranslateContainerConfig } from "../interface/translate-container-config";
import { RxTranslateConfig } from "../interface/rx-translate-config";
import { ActivatedRouteSnapshot } from "@angular/router";
import { Observable } from 'rxjs';
import { HttpClient } from "@angular/common/http";
export declare class BaseResolver {
    private baseConfig;
    private httpClient;
    constructor(baseConfig: RxTranslateConfig, httpClient: HttpClient);
    cloneBaseConfig: RxTranslateConfig;
    xhr: XMLHttpRequest;
    containerConfig: TranslateContainerConfig;
    loadEventFunction: any;
    resolveGlobal(config: TranslateContainerConfig, isGlobal?: boolean): void;
    resolve(config: TranslateContainerConfig, languageCode?: string, isRouteLanguageChanged?: boolean): Observable<boolean>;
    setTitle(body: any, containerConfig: TranslateContainerConfig): void;
    setData(languageCode: string, containerConfig: TranslateContainerConfig): (body: any) => any;
    getPath(containerConfig: TranslateContainerConfig, languageCode?: string): string;
    resolveRoute(route: ActivatedRouteSnapshot): Observable<boolean>;
    resolveData(containerConfig: TranslateContainerConfig, languageCode: string, isRouteLanguageChanged?: boolean): Observable<boolean>;
    updateLanguageByParam(route: ActivatedRouteSnapshot): void;
    languageChanged(languageCode: string, onComplete?: Function): void;
    resolveByName(name: string, languageCode?: string): Observable<boolean>;
    fakeResolveByName(name: string, fakeData: any, resolve: Function): void;
    private getKeys;
    private changeTranslation;
    private setPageTitle;
}
