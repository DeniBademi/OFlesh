{"version":3,"file":"translation-resolver.d.ts","sources":["translation-resolver.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { HttpClient } from \"@angular/common/http\";\r\nimport { ErrorMessageConfig } from \"../interface/error-message-config\";\r\nexport declare class TranslationResolver {\r\n    private httpClient;\r\n    constructor(httpClient: HttpClient);\r\n    private _allowedLanguages;\r\n    set controlErrorMessage(value: ErrorMessageConfig);\r\n    set resolver(value: Function);\r\n    get allowedLanguages(): string[];\r\n    get activeTranslationsLength(): number;\r\n    set ngxTranslate(value: any);\r\n    get injector(): import(\"@angular/core\").Injector;\r\n    get pending(): boolean;\r\n    get activeLanguage(): string;\r\n    set activeLanguage(lang: string);\r\n    get translations(): {\r\n        [key: string]: any;\r\n    };\r\n    getTranslationName(nodeName: string, languageCode?: string): string;\r\n    getTranslationNameByInstance(instance: any, languageCode?: string): string;\r\n    get(modelName: string, languageCode?: string): any;\r\n    getKeyName(modelName: string, languageCode?: string): string;\r\n    resolve(modelName: any, languageCode: string): import(\"rxjs\").Observable<boolean>;\r\n    addConfig(name: string): void;\r\n}\r\n"]}