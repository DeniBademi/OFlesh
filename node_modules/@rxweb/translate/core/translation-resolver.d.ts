import { HttpClient } from "@angular/common/http";
import { ErrorMessageConfig } from "../interface/error-message-config";
import * as ɵngcc0 from '@angular/core';
export declare class TranslationResolver {
    private httpClient;
    constructor(httpClient: HttpClient);
    private _allowedLanguages;
    set controlErrorMessage(value: ErrorMessageConfig);
    set resolver(value: Function);
    get allowedLanguages(): string[];
    get activeTranslationsLength(): number;
    set ngxTranslate(value: any);
    get injector(): import("@angular/core").Injector;
    get pending(): boolean;
    get activeLanguage(): string;
    set activeLanguage(lang: string);
    get translations(): {
        [key: string]: any;
    };
    getTranslationName(nodeName: string, languageCode?: string): string;
    getTranslationNameByInstance(instance: any, languageCode?: string): string;
    get(modelName: string, languageCode?: string): any;
    getKeyName(modelName: string, languageCode?: string): string;
    resolve(modelName: any, languageCode: string): import("rxjs").Observable<boolean>;
    addConfig(name: string): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TranslationResolver, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDeclaration<TranslationResolver>;
}

//# sourceMappingURL=translation-resolver.d.ts.map