export const MultiLingualData = new (class {
    constructor() {
        this.translationModelData = new Array();
        this.data = {};
        this.keys = {};
        this.contentKeysByLanguage = {};
    }
    addOrUpdate(key, data, translationName, languageCode) {
        this.data[key] = data;
        this.keys[translationName] = true;
        if (languageCode)
            this.contentKeysByLanguage[key] = languageCode;
    }
    addOrUpdateComponent(key, data, instance, refMarkedId) {
        let indexOf = this.translationModelData.findIndex(t => t.instance == instance && t.key == key && t.rxRefMarkedId == refMarkedId);
        if (indexOf != -1)
            this.translationModelData[indexOf] = { key: key, data: data, instance: instance, rxRefMarkedId: refMarkedId };
        else
            this.translationModelData.push({ key: key, data: data, instance: instance, rxRefMarkedId: refMarkedId });
    }
    getComponentPropValue(key, instance, refMarkedId) {
        let indexOf = this.translationModelData.findIndex(t => t.instance == instance && t.key == key && t.rxRefMarkedId == refMarkedId);
        return indexOf != -1 ? this.translationModelData[indexOf].data : undefined;
    }
    removeComponentPropValue(instance, refMarkedId, keyName) {
        let indexOf = -1;
        if (keyName)
            indexOf = this.translationModelData.findIndex(t => t.instance == instance && t.rxRefMarkedId == refMarkedId && t.key == keyName);
        else {
            let result = this.translationModelData.filter(t => t.instance == instance && t.rxRefMarkedId == refMarkedId);
            for (let data of result) {
                this.translationModelData.splice(this.translationModelData.indexOf(data), 1);
            }
        }
        return indexOf != -1 ? this.translationModelData.splice(indexOf, 1) : undefined;
    }
    contains(key, languageCode) {
        return this.data[key] ? this.contentKeysByLanguage[key] == languageCode : false;
    }
    get(key) {
        return this.data[key] ? this.data[key] : undefined;
    }
    clearInActives(config) {
        if (!config.cacheActiveLanguageObject || (!config.cacheActiveLanguageObject && !config.cacheLanguageWiseObject))
            Object.keys(this.keys).forEach(t => {
                if (!this.keys[t] && this.data[t]) {
                    delete this.data[t];
                }
            });
    }
    getActiveKeys() {
        return Object.keys(this.keys);
    }
    remove(key) {
        this.keys[key] = undefined;
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGlsaW5ndWFsLWRhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy90cmFuc2xhdGUvY29yZS9tdWx0aWxpbmd1YWwtZGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FZckIsSUFBSSxDQUFDO0lBQUE7UUFDRyx5QkFBb0IsR0FBZ0MsSUFBSSxLQUFLLEVBQXdCLENBQUM7UUFDOUYsU0FBSSxHQUEyQixFQUFFLENBQUM7UUFDMUIsU0FBSSxHQUErQixFQUFFLENBQUM7UUFDdEMsMEJBQXFCLEdBQThCLEVBQUUsQ0FBQztJQTZEbEUsQ0FBQztJQTNERyxXQUFXLENBQUMsR0FBVyxFQUFFLElBQTRCLEVBQUUsZUFBdUIsRUFBRSxZQUFxQjtRQUNqRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUNsQyxJQUFJLFlBQVk7WUFDWixJQUFJLENBQUMscUJBQXFCLENBQUMsR0FBRyxDQUFDLEdBQUcsWUFBWSxDQUFBO0lBQ3RELENBQUM7SUFHRCxvQkFBb0IsQ0FBQyxHQUFXLEVBQUUsSUFBNEIsRUFBRSxRQUFrQixFQUFFLFdBQW1CO1FBQ25HLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxJQUFJLFFBQVEsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsYUFBYSxJQUFJLFdBQVcsQ0FBQyxDQUFDO1FBQ2pJLElBQUksT0FBTyxJQUFJLENBQUMsQ0FBQztZQUNiLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxF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Q0FBQyxFQUFFO29CQUMvQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ3ZCO1lBQ0wsQ0FBQyxDQUFDLENBQUE7SUFDVixDQUFDO0lBRUQsYUFBYTtRQUNULE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFXO1FBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxTQUFTLENBQUM7SUFDL0IsQ0FBQztDQUVKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJ4VHJhbnNsYXRlQ29uZmlnIH0gZnJvbSBcIi4uL2ludGVyZmFjZS9yeC10cmFuc2xhdGUtY29uZmlnXCI7XHJcbmltcG9ydCB7IFRyYW5zbGF0aW9uTW9kZWxEYXRhIH0gZnJvbSBcIi4uL2ludGVyZmFjZS90cmFuc2xhdGlvbi1tb2RlbC1kYXRhXCI7XHJcblxyXG5leHBvcnQgY29uc3QgTXVsdGlMaW5ndWFsRGF0YTpcclxuICAgIHtcclxuICAgICAgICBhZGRPclVwZGF0ZShrZXk6IHN0cmluZywgZGF0YTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSwgdHJhbnNsYXRpb25OYW1lOiBzdHJpbmcsIGxhbmd1YWdlQ29kZT86IHN0cmluZyk7XHJcbiAgICAgICAgYWRkT3JVcGRhdGVDb21wb25lbnQoa2V5OiBzdHJpbmcsIGRhdGE6IHsgW2tleTogc3RyaW5nXTogYW55IH0sIGluc3RhbmNlOiBGdW5jdGlvbiwgcmVmTWFya2VkSWQ6IG51bWJlcik7XHJcbiAgICAgICAgZ2V0Q29tcG9uZW50UHJvcFZhbHVlKGtleTogc3RyaW5nLCBpbnN0YW5jZTogRnVuY3Rpb24sIHJlZk1hcmtlZElkOiBudW1iZXIpO1xyXG4gICAgICAgIHJlbW92ZUNvbXBvbmVudFByb3BWYWx1ZShpbnN0YW5jZTogRnVuY3Rpb24sIHJlZk1hcmtlZElkOiBudW1iZXIsIGtleU5hbWU/OiBzdHJpbmcpO1xyXG4gICAgICAgIHJlbW92ZShrZXk6IHN0cmluZyk7XHJcbiAgICAgICAgZ2V0KGtleTogc3RyaW5nKTtcclxuICAgICAgICBjbGVhckluQWN0aXZlcyhjb25maWc6IFJ4VHJhbnNsYXRlQ29uZmlnKTtcclxuICAgICAgICBnZXRBY3RpdmVLZXlzKCk7XHJcbiAgICAgICAgY29udGFpbnMoa2V5OiBzdHJpbmcsIGxhbmd1YWdlQ29kZTogc3RyaW5nKTtcclxuICAgICAgICBkYXRhOiB7IFtrZXk6IHN0cmluZ106IGFueSB9O1xyXG4gICAgfSA9IG5ldyAoY2xhc3Mge1xyXG4gICAgICAgIHByaXZhdGUgdHJhbnNsYXRpb25Nb2RlbERhdGE6IEFycmF5PFRyYW5zbGF0aW9uTW9kZWxEYXRhPiA9IG5ldyBBcnJheTxUcmFuc2xhdGlvbk1vZGVsRGF0YT4oKTtcclxuICAgICAgICBkYXRhOiB7IFtrZXk6IHN0cmluZ106IGFueSB9ID0ge307XHJcbiAgICAgICAgcHJpdmF0ZSBrZXlzOiB7IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfSA9IHt9O1xyXG4gICAgICAgIHByaXZhdGUgY29udGVudEtleXNCeUxhbmd1YWdlOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge307XHJcblxyXG4gICAgICAgIGFkZE9yVXBkYXRlKGtleTogc3RyaW5nLCBkYXRhOiB7IFtrZXk6IHN0cmluZ106IGFueSB9LCB0cmFuc2xhdGlvbk5hbWU6IHN0cmluZywgbGFuZ3VhZ2VDb2RlPzogc3RyaW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YVtrZXldID0gZGF0YTtcclxuICAgICAgICAgICAgdGhpcy5rZXlzW3RyYW5zbGF0aW9uTmFtZV0gPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAobGFuZ3VhZ2VDb2RlKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZW50S2V5c0J5TGFuZ3VhZ2Vba2V5XSA9IGxhbmd1YWdlQ29kZVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGFkZE9yVXBkYXRlQ29tcG9uZW50KGtleTogc3RyaW5nLCBkYXRhOiB7IFtrZXk6IHN0cmluZ106IGFueSB9LCBpbnN0YW5jZTogRnVuY3Rpb24sIHJlZk1hcmtlZElkOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgbGV0IGluZGV4T2YgPSB0aGlzLnRyYW5zbGF0aW9uTW9kZWxEYXRhLmZpbmRJbmRleCh0ID0+IHQuaW5zdGFuY2UgPT0gaW5zdGFuY2UgJiYgdC5rZXkgPT0ga2V5ICYmIHQucnhSZWZNYXJrZWRJZCA9PSByZWZNYXJrZWRJZCk7XHJcbiAgICAgICAgICAgIGlmIChpbmRleE9mICE9IC0xKVxyXG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2xhdGlvbk1vZGVsRGF0YVtpbmRleE9mXSA9IHsga2V5OiBrZXksIGRhdGE6IGRhdGEsIGluc3RhbmNlOiBpbnN0YW5jZSwgcnhSZWZNYXJrZWRJZDogcmVmTWFya2VkSWQgfTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2xhdGlvbk1vZGVsRGF0YS5wdXNoKHsga2V5OiBrZXksIGRhdGE6IGRhdGEsIGluc3RhbmNlOiBpbnN0YW5jZSwgcnhSZWZNYXJrZWRJZDogcmVmTWFya2VkSWQgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXRDb21wb25lbnRQcm9wVmFsdWUoa2V5OiBzdHJpbmcsIGluc3RhbmNlOiBGdW5jdGlvbiwgcmVmTWFya2VkSWQ6IG51bWJlcikge1xyXG4gICAgICAgICAgICBsZXQgaW5kZXhPZiA9IHRoaXMudHJhbnNsYXRpb25Nb2RlbERhdGEuZmluZEluZGV4KHQgPT4gdC5pbnN0YW5jZSA9PSBpbnN0YW5jZSAmJiB0LmtleSA9PSBrZXkgJiYgdC5yeFJlZk1hcmtlZElkID09IHJlZk1hcmtlZElkKTtcclxuICAgICAgICAgICAgcmV0dXJuIGluZGV4T2YgIT0gLTEgPyB0aGlzLnRyYW5zbGF0aW9uTW9kZWxEYXRhW2luZGV4T2ZdLmRhdGEgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZW1vdmVDb21wb25lbnRQcm9wVmFsdWUoaW5zdGFuY2U6IEZ1bmN0aW9uLCByZWZNYXJrZWRJZDogbnVtYmVyLCBrZXlOYW1lPzogc3RyaW5nKSB7XHJcbiAgICAgICAgICAgIGxldCBpbmRleE9mID0gLTE7XHJcbiAgICAgICAgICAgIGlmIChrZXlOYW1lKVxyXG4gICAgICAgICAgICAgICAgaW5kZXhPZiA9IHRoaXMudHJhbnNsYXRpb25Nb2RlbERhdGEuZmluZEluZGV4KHQgPT4gdC5pbnN0YW5jZSA9PSBpbnN0YW5jZSAmJiB0LnJ4UmVmTWFya2VkSWQgPT0gcmVmTWFya2VkSWQgJiYgdC5rZXkgPT0ga2V5TmFtZSk7XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMudHJhbnNsYXRpb25Nb2RlbERhdGEuZmlsdGVyKHQgPT4gdC5pbnN0YW5jZSA9PSBpbnN0YW5jZSAmJiB0LnJ4UmVmTWFya2VkSWQgPT0gcmVmTWFya2VkSWQpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgZGF0YSBvZiByZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zbGF0aW9uTW9kZWxEYXRhLnNwbGljZSh0aGlzLnRyYW5zbGF0aW9uTW9kZWxEYXRhLmluZGV4T2YoZGF0YSksIDEpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGluZGV4T2YgIT0gLTEgPyB0aGlzLnRyYW5zbGF0aW9uTW9kZWxEYXRhLnNwbGljZShpbmRleE9mLCAxKSA6IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRhaW5zKGtleTogc3RyaW5nLCBsYW5ndWFnZUNvZGU6IHN0cmluZykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhW2tleV0gPyB0aGlzLmNvbnRlbnRLZXlzQnlMYW5ndWFnZVtrZXldID09IGxhbmd1YWdlQ29kZSA6IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0KGtleTogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVtrZXldID8gdGhpcy5kYXRhW2tleV0gOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGVhckluQWN0aXZlcyhjb25maWc6IFJ4VHJhbnNsYXRlQ29uZmlnKSB7XHJcbiAgICAgICAgICAgIGlmICghY29uZmlnLmNhY2hlQWN0aXZlTGFuZ3VhZ2VPYmplY3QgfHwgKCFjb25maWcuY2FjaGVBY3RpdmVMYW5ndWFnZU9iamVjdCAmJiAhY29uZmlnLmNhY2hlTGFuZ3VhZ2VXaXNlT2JqZWN0KSlcclxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMua2V5cykuZm9yRWFjaCh0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMua2V5c1t0XSAmJiB0aGlzLmRhdGFbdF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuZGF0YVt0XTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0QWN0aXZlS2V5cygpOiBzdHJpbmdbXSB7XHJcbiAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLmtleXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmVtb3ZlKGtleTogc3RyaW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMua2V5c1trZXldID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9KTsiXX0=