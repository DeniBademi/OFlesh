import { BaseResolver } from "./base-resolver";
import { Inject, Injector, Injectable } from "@angular/core";
import { RxTranslateConfig } from "../interface/rx-translate-config";
import { translateConfigContainer } from '../core/translate-config-container';
import { RX_TRANSLATE_CONFIG, CUSTOM_LOADER } from "../core/rx-translate-config.const";
import { HttpClient } from "@angular/common/http";
import { Observable } from "rxjs";
export class ComponentGuard extends BaseResolver {
    constructor(config, injector, customLoader, httpClient) { super(config, httpClient); translateConfigContainer.injector = injector; if (!translateConfigContainer.customLoader)
        translateConfigContainer.customLoader = customLoader; }
    canActivateChild(childRoute, state) {
        return this.resolveGlobalTranslate(childRoute);
    }
    canActivate(route, state) {
        return this.resolveGlobalTranslate(route);
    }
    resolveGlobalTranslate(route) {
        this.cloneBaseConfig = Object.assign({}, translateConfigContainer.config);
        if (translateConfigContainer.globalTranslate) {
            return Observable.create(subscriber => {
                translateConfigContainer.globalTranslate.subscribe(t => {
                    this.resolveRoute(route).subscribe(x => { subscriber.next(x); subscriber.complete(); });
                });
            });
        }
        else
            return this.resolveRoute(route);
    }
}
ComponentGuard.decorators = [
    { type: Injectable }
];
ComponentGuard.ctorParameters = () => [
    { type: RxTranslateConfig, decorators: [{ type: Inject, args: [RX_TRANSLATE_CONFIG,] }] },
    { type: Injector },
    { type: undefined, decorators: [{ type: Inject, args: [CUSTOM_LOADER,] }] },
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LW11bHRpbGluZ3VhbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3RyYW5zbGF0ZS9yZXNvbHZlci9jb21wb25lbnQtbXVsdGlsaW5ndWFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDckUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sb0NBQW9DLENBQUE7QUFDN0UsT0FBTyxFQUFFLG1CQUFtQixFQUFFLGFBQWEsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBR3ZGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBR2xDLE1BQU0sT0FBTyxjQUFlLFNBQVEsWUFBWTtJQUU1QyxZQUF5QyxNQUF5QixFQUFFLFFBQWtCLEVBQXlCLFlBQStCLEVBQUUsVUFBc0IsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsd0JBQXdCLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxZQUFZO1FBQUUsd0JBQXdCLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFHdFYsZ0JBQWdCLENBQUMsVUFBa0MsRUFBRSxLQUEwQjtRQUMzRSxPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQsV0FBVyxDQUFDLEtBQTZCLEVBQUUsS0FBMEI7UUFDakUsT0FBTyxJQUFJLENBQUMsc0JBQXNCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVPLHNCQUFzQixDQUFDLEtBQTZCO1FBQ3hELElBQUksQ0FBQyxlQUFlLHFCQUFRLHdCQUF3QixDQUFDLE1BQU0sQ0FBRSxDQUFDO1FBQzlELElBQUksd0JBQXdCLENBQUMsZUFBZSxFQUFFO1lBQzFDLE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRTtnQkFDbEMsd0JBQXdCLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTtvQkFDbkQsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzNGLENBQUMsQ0FBQyxDQUFBO1lBQ04sQ0FBQyxDQUFDLENBQUE7U0FDTDs7WUFDRyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEMsQ0FBQzs7O1lBeEJKLFVBQVU7OztZQVJGLGlCQUFpQix1QkFXVCxNQUFNLFNBQUMsbUJBQW1CO1lBWjFCLFFBQVE7NENBWW9FLE1BQU0sU0FBQyxhQUFhO1lBTnhHLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDYW5BY3RpdmF0ZSwgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgUm91dGVyU3RhdGVTbmFwc2hvdCwgQ2FuQWN0aXZhdGVDaGlsZCB9IGZyb20gXCJAYW5ndWxhci9yb3V0ZXJcIjtcclxuaW1wb3J0IHsgQmFzZVJlc29sdmVyIH0gZnJvbSBcIi4vYmFzZS1yZXNvbHZlclwiO1xyXG5pbXBvcnQgeyBJbmplY3QsIEluamVjdG9yLCBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgUnhUcmFuc2xhdGVDb25maWcgfSBmcm9tIFwiLi4vaW50ZXJmYWNlL3J4LXRyYW5zbGF0ZS1jb25maWdcIjtcclxuaW1wb3J0IHsgdHJhbnNsYXRlQ29uZmlnQ29udGFpbmVyIH0gZnJvbSAnLi4vY29yZS90cmFuc2xhdGUtY29uZmlnLWNvbnRhaW5lcidcclxuaW1wb3J0IHsgUlhfVFJBTlNMQVRFX0NPTkZJRywgQ1VTVE9NX0xPQURFUiB9IGZyb20gXCIuLi9jb3JlL3J4LXRyYW5zbGF0ZS1jb25maWcuY29uc3RcIjtcclxuaW1wb3J0IHsgVGl0bGUgfSBmcm9tIFwiQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3NlclwiO1xyXG5pbXBvcnQgeyBUcmFuc2xhdGlvbkxvYWRlciB9IGZyb20gXCIuLi9pbnRlcmZhY2UvdHJhbnNsYXRpb24tbG9hZGVyXCI7XHJcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uL2h0dHBcIjtcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzXCI7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBDb21wb25lbnRHdWFyZCBleHRlbmRzIEJhc2VSZXNvbHZlciBpbXBsZW1lbnRzIENhbkFjdGl2YXRlLCBDYW5BY3RpdmF0ZUNoaWxkIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KFJYX1RSQU5TTEFURV9DT05GSUcpIGNvbmZpZzogUnhUcmFuc2xhdGVDb25maWcsIGluamVjdG9yOiBJbmplY3RvciwgQEluamVjdChDVVNUT01fTE9BREVSKSBjdXN0b21Mb2FkZXI6IFRyYW5zbGF0aW9uTG9hZGVyLCBodHRwQ2xpZW50OiBIdHRwQ2xpZW50KSB7IHN1cGVyKGNvbmZpZywgaHR0cENsaWVudCk7IHRyYW5zbGF0ZUNvbmZpZ0NvbnRhaW5lci5pbmplY3RvciA9IGluamVjdG9yOyBpZiAoIXRyYW5zbGF0ZUNvbmZpZ0NvbnRhaW5lci5jdXN0b21Mb2FkZXIpIHRyYW5zbGF0ZUNvbmZpZ0NvbnRhaW5lci5jdXN0b21Mb2FkZXIgPSBjdXN0b21Mb2FkZXI7IH1cclxuXHJcblxyXG4gICAgY2FuQWN0aXZhdGVDaGlsZChjaGlsZFJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlc29sdmVHbG9iYWxUcmFuc2xhdGUoY2hpbGRSb3V0ZSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNhbkFjdGl2YXRlKHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlc29sdmVHbG9iYWxUcmFuc2xhdGUocm91dGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVzb2x2ZUdsb2JhbFRyYW5zbGF0ZShyb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCkge1xyXG4gICAgICAgIHRoaXMuY2xvbmVCYXNlQ29uZmlnID0geyAuLi50cmFuc2xhdGVDb25maWdDb250YWluZXIuY29uZmlnIH07XHJcbiAgICAgICAgaWYgKHRyYW5zbGF0ZUNvbmZpZ0NvbnRhaW5lci5nbG9iYWxUcmFuc2xhdGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE9ic2VydmFibGUuY3JlYXRlKHN1YnNjcmliZXIgPT4ge1xyXG4gICAgICAgICAgICAgICAgdHJhbnNsYXRlQ29uZmlnQ29udGFpbmVyLmdsb2JhbFRyYW5zbGF0ZS5zdWJzY3JpYmUodCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNvbHZlUm91dGUocm91dGUpLnN1YnNjcmliZSh4ID0+IHsgc3Vic2NyaWJlci5uZXh0KHgpOyBzdWJzY3JpYmVyLmNvbXBsZXRlKCkgfSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXNvbHZlUm91dGUocm91dGUpO1xyXG4gICAgfVxyXG5cclxuICAgIFxyXG59XHJcbiJdfQ==