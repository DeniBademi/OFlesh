import { Pipe } from "@angular/core";
import { extract } from "../functions/extract";
import { getValue } from "../functions/get-value";
export class RxTranslatePipe {
    transform(text, params) {
        if (text && params && Object.keys(params).length > 0) {
            if (text.indexOf('{{{this') !== -1) {
                let stringExtractor = extract(['{{{', '}}}']);
                let keys = stringExtractor(text);
                keys.forEach(t => {
                    var func = new Function("x", "return " + t);
                    let calculatedText = func.call(params);
                    text = text.replace(`{{{${t}}}}`, calculatedText);
                });
            }
            if (text && text.indexOf("{{") != -1) {
                let stringExtractor = extract(['{{', '}}']);
                let keys = stringExtractor(text);
                keys.forEach(key => {
                    let value = getValue(key, params);
                    text = text.replace(`{{${key}}}`, value);
                });
            }
        }
        return text;
    }
}
RxTranslatePipe.decorators = [
    { type: Pipe, args: [{ name: 'rxTranslate' },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicngtdHJhbnNsYXRlLnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy90cmFuc2xhdGUvcHVyZS1waXBlcy9yeC10cmFuc2xhdGUucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBR2xELE1BQU0sT0FBTyxlQUFlO0lBQ3hCLFNBQVMsQ0FBQyxJQUFZLEVBQUUsTUFBMEI7UUFDOUMsSUFBSSxJQUFJLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNsRCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7Z0JBQ2hDLElBQUksZUFBZSxHQUFHLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUM5QyxJQUFJLElBQUksR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUE7Z0JBQ2hDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQ2IsSUFBSSxJQUFJLEdBQUcsSUFBSSxRQUFRLENBQUMsR0FBRyxFQUFFLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQztvQkFDNUMsSUFBSSxjQUFjLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztvQkFDdkMsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxjQUFjLENBQUMsQ0FBQztnQkFDdEQsQ0FBQyxDQUFDLENBQUE7YUFDTDtZQUNELElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUU7Z0JBQ2xDLElBQUksZUFBZSxHQUFHLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUM1QyxJQUFJLElBQUksR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ2pDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7b0JBQ2YsSUFBSSxLQUFLLEdBQUcsUUFBUSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztvQkFDbEMsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztnQkFDN0MsQ0FBQyxDQUFDLENBQUE7YUFDTDtTQUNKO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQzs7O1lBdkJKLElBQUksU0FBQyxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgZXh0cmFjdCB9IGZyb20gXCIuLi9mdW5jdGlvbnMvZXh0cmFjdFwiO1xyXG5pbXBvcnQgeyBnZXRWYWx1ZSB9IGZyb20gXCIuLi9mdW5jdGlvbnMvZ2V0LXZhbHVlXCI7XHJcblxyXG5AUGlwZSh7IG5hbWU6ICdyeFRyYW5zbGF0ZScgfSlcclxuZXhwb3J0IGNsYXNzIFJ4VHJhbnNsYXRlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gICAgdHJhbnNmb3JtKHRleHQ6IHN0cmluZywgcGFyYW1zOiB7W2tleTpzdHJpbmddOmFueX0pOiBzdHJpbmcge1xyXG4gICAgICAgIGlmICh0ZXh0ICYmIHBhcmFtcyAmJiBPYmplY3Qua2V5cyhwYXJhbXMpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgaWYgKHRleHQuaW5kZXhPZigne3t7dGhpcycpICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHN0cmluZ0V4dHJhY3RvciA9IGV4dHJhY3QoWyd7e3snLCAnfX19J10pO1xyXG4gICAgICAgICAgICAgICAgbGV0IGtleXMgPSBzdHJpbmdFeHRyYWN0b3IodGV4dClcclxuICAgICAgICAgICAgICAgIGtleXMuZm9yRWFjaCh0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZnVuYyA9IG5ldyBGdW5jdGlvbihcInhcIiwgXCJyZXR1cm4gXCIgKyB0KTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY2FsY3VsYXRlZFRleHQgPSBmdW5jLmNhbGwocGFyYW1zKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKGB7e3ske3R9fX19YCwgY2FsY3VsYXRlZFRleHQpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGV4dCAmJiB0ZXh0LmluZGV4T2YoXCJ7e1wiKSAhPSAtMSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHN0cmluZ0V4dHJhY3RvciA9IGV4dHJhY3QoWyd7eycsICd9fSddKTtcclxuICAgICAgICAgICAgICAgIGxldCBrZXlzID0gc3RyaW5nRXh0cmFjdG9yKHRleHQpO1xyXG4gICAgICAgICAgICAgICAga2V5cy5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gZ2V0VmFsdWUoa2V5LCBwYXJhbXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoYHt7JHtrZXl9fX1gLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0ZXh0O1xyXG4gICAgfVxyXG59Il19