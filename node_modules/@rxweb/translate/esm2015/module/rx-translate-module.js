import { ComponentGuard } from "../resolver/component-multilingual";
import { NgModule, Inject } from "@angular/core";
import { RxTranslateConfig } from "../interface/rx-translate-config";
import { RxTranslateDirective } from "../directives/rx-translate.directive";
import { BaseResolver } from "../resolver/base-resolver";
import { overrideProperty } from "../functions";
import { RouterModule } from "@angular/router";
import { translateConfigContainer } from "../core/translate-config-container";
import { RxTranslation } from "../service/rx-translation";
import { RX_TRANSLATE_CONFIG, CUSTOM_LOADER } from "../core/rx-translate-config.const";
import { overrideErrorsProperty } from "../functions/override-errors-property";
import { TranslationResolver } from "../core/translation-resolver";
import { HttpClientModule, HttpClient } from "@angular/common/http";
import { RxTranslatePipe } from "../pure-pipes/rx-translate.pipe";
export class RxTranslateModule {
    constructor(config, httpClient) {
        if (!translateConfigContainer.config) {
            translateConfigContainer.httpClient = httpClient;
            translateConfigContainer.config = config;
            if (!translateConfigContainer.config.languageCode)
                translateConfigContainer.config.languageCode = "en";
            let translateConfig = { config: { translationName: 'global', filePath: config.globalFilePath }, instance: null };
            var baseResolver = new BaseResolver(config, httpClient);
            baseResolver.resolveGlobal(translateConfig);
            overrideProperty();
            if (config.controlErrorMessage)
                overrideErrorsProperty(config.controlErrorMessage);
        }
    }
    static forRoot(config) {
        return {
            ngModule: RxTranslateModule,
            providers: [
                ComponentGuard, RxTranslation,
                { provide: RX_TRANSLATE_CONFIG, useValue: config },
                config.loader ? { provide: CUSTOM_LOADER, useClass: config.loader } : { provide: CUSTOM_LOADER, useValue: null },
            ]
        };
    }
}
RxTranslateModule.decorators = [
    { type: NgModule, args: [{
                imports: [RouterModule, HttpClientModule],
                declarations: [RxTranslateDirective, RxTranslatePipe],
                providers: [ComponentGuard, RxTranslation, TranslationResolver, { provide: CUSTOM_LOADER, useValue: null }],
                exports: [RxTranslateDirective, RxTranslatePipe],
            },] }
];
RxTranslateModule.ctorParameters = () => [
    { type: RxTranslateConfig, decorators: [{ type: Inject, args: [RX_TRANSLATE_CONFIG,] }] },
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicngtdHJhbnNsYXRlLW1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3RyYW5zbGF0ZS9tb2R1bGUvcngtdHJhbnNsYXRlLW1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDcEUsT0FBTyxFQUFFLFFBQVEsRUFBdUIsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBRXJFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQzVFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDaEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRS9DLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQzlFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDdkYsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDL0UsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDbkUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQVFsRSxNQUFNLE9BQU8saUJBQWlCO0lBQzFCLFlBQXlDLE1BQXlCLEVBQUUsVUFBc0I7UUFDdEYsSUFBSSxDQUFDLHdCQUF3QixDQUFDLE1BQU0sRUFBRTtZQUNsQyx3QkFBd0IsQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1lBQ2pELHdCQUF3QixDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7WUFDekMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLE1BQU0sQ0FBQyxZQUFZO2dCQUM3Qyx3QkFBd0IsQ0FBQyxNQUFNLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztZQUN4RCxJQUFJLGVBQWUsR0FBRyxFQUFFLE1BQU0sRUFBRSxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxjQUFjLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUM7WUFDakgsSUFBSSxZQUFZLEdBQUcsSUFBSSxZQUFZLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQ3hELFlBQVksQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLENBQUM7WUFDNUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUNuQixJQUFJLE1BQU0sQ0FBQyxtQkFBbUI7Z0JBQzFCLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1NBQzFEO0lBRUwsQ0FBQztJQUNELE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBMEI7UUFDckMsT0FBTztZQUNILFFBQVEsRUFBRSxpQkFBaUI7WUFDM0IsU0FBUyxFQUFFO2dCQUNQLGNBQWMsRUFBRSxhQUFhO2dCQUM3QixFQUFFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFO2dCQUNsRCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFPLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUU7YUFDeEg7U0FDSixDQUFDO0lBQ04sQ0FBQzs7O1lBL0JKLFFBQVEsU0FBQztnQkFDTixPQUFPLEVBQUUsQ0FBQyxZQUFZLEVBQUUsZ0JBQWdCLENBQUM7Z0JBQ3pDLFlBQVksRUFBRSxDQUFDLG9CQUFvQixFQUFFLGVBQWUsQ0FBQztnQkFDckQsU0FBUyxFQUFFLENBQUMsY0FBYyxFQUFFLGFBQWEsRUFBRSxtQkFBbUIsRUFBQyxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDO2dCQUMxRyxPQUFPLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxlQUFlLENBQUM7YUFDbkQ7OztZQXBCUSxpQkFBaUIsdUJBc0JULE1BQU0sU0FBQyxtQkFBbUI7WUFWaEIsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudEd1YXJkIH0gZnJvbSBcIi4uL3Jlc29sdmVyL2NvbXBvbmVudC1tdWx0aWxpbmd1YWxcIjtcclxuaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMsIEluamVjdCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IFJ4VHJhbnNsYXRlQ29uZmlnIH0gZnJvbSBcIi4uL2ludGVyZmFjZS9yeC10cmFuc2xhdGUtY29uZmlnXCI7XHJcblxyXG5pbXBvcnQgeyBSeFRyYW5zbGF0ZURpcmVjdGl2ZSB9IGZyb20gXCIuLi9kaXJlY3RpdmVzL3J4LXRyYW5zbGF0ZS5kaXJlY3RpdmVcIjtcclxuaW1wb3J0IHsgQmFzZVJlc29sdmVyIH0gZnJvbSBcIi4uL3Jlc29sdmVyL2Jhc2UtcmVzb2x2ZXJcIjtcclxuaW1wb3J0IHsgb3ZlcnJpZGVQcm9wZXJ0eSB9IGZyb20gXCIuLi9mdW5jdGlvbnNcIjtcclxuaW1wb3J0IHsgUm91dGVyTW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL3JvdXRlclwiO1xyXG5cclxuaW1wb3J0IHsgdHJhbnNsYXRlQ29uZmlnQ29udGFpbmVyIH0gZnJvbSBcIi4uL2NvcmUvdHJhbnNsYXRlLWNvbmZpZy1jb250YWluZXJcIjtcclxuaW1wb3J0IHsgUnhUcmFuc2xhdGlvbiB9IGZyb20gXCIuLi9zZXJ2aWNlL3J4LXRyYW5zbGF0aW9uXCI7XHJcbmltcG9ydCB7IFJYX1RSQU5TTEFURV9DT05GSUcsIENVU1RPTV9MT0FERVIgfSBmcm9tIFwiLi4vY29yZS9yeC10cmFuc2xhdGUtY29uZmlnLmNvbnN0XCI7XHJcbmltcG9ydCB7IG92ZXJyaWRlRXJyb3JzUHJvcGVydHkgfSBmcm9tIFwiLi4vZnVuY3Rpb25zL292ZXJyaWRlLWVycm9ycy1wcm9wZXJ0eVwiO1xyXG5pbXBvcnQgeyBUcmFuc2xhdGlvblJlc29sdmVyIH0gZnJvbSBcIi4uL2NvcmUvdHJhbnNsYXRpb24tcmVzb2x2ZXJcIjtcclxuaW1wb3J0IHsgSHR0cENsaWVudE1vZHVsZSwgSHR0cENsaWVudCB9IGZyb20gXCJAYW5ndWxhci9jb21tb24vaHR0cFwiO1xyXG5pbXBvcnQgeyBSeFRyYW5zbGF0ZVBpcGUgfSBmcm9tIFwiLi4vcHVyZS1waXBlcy9yeC10cmFuc2xhdGUucGlwZVwiO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICAgIGltcG9ydHM6IFtSb3V0ZXJNb2R1bGUsIEh0dHBDbGllbnRNb2R1bGVdLFxyXG4gICAgZGVjbGFyYXRpb25zOiBbUnhUcmFuc2xhdGVEaXJlY3RpdmUsIFJ4VHJhbnNsYXRlUGlwZV0sXHJcbiAgICBwcm92aWRlcnM6IFtDb21wb25lbnRHdWFyZCwgUnhUcmFuc2xhdGlvbiwgVHJhbnNsYXRpb25SZXNvbHZlcix7IHByb3ZpZGU6IENVU1RPTV9MT0FERVIsIHVzZVZhbHVlOiBudWxsIH1dLFxyXG4gICAgZXhwb3J0czogW1J4VHJhbnNsYXRlRGlyZWN0aXZlLCBSeFRyYW5zbGF0ZVBpcGVdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgUnhUcmFuc2xhdGVNb2R1bGUge1xyXG4gICAgY29uc3RydWN0b3IoQEluamVjdChSWF9UUkFOU0xBVEVfQ09ORklHKSBjb25maWc6IFJ4VHJhbnNsYXRlQ29uZmlnLCBodHRwQ2xpZW50OiBIdHRwQ2xpZW50LCkge1xyXG4gICAgICAgIGlmICghdHJhbnNsYXRlQ29uZmlnQ29udGFpbmVyLmNvbmZpZykge1xyXG4gICAgICAgICAgICB0cmFuc2xhdGVDb25maWdDb250YWluZXIuaHR0cENsaWVudCA9IGh0dHBDbGllbnQ7XHJcbiAgICAgICAgICAgIHRyYW5zbGF0ZUNvbmZpZ0NvbnRhaW5lci5jb25maWcgPSBjb25maWc7XHJcbiAgICAgICAgICAgIGlmICghdHJhbnNsYXRlQ29uZmlnQ29udGFpbmVyLmNvbmZpZy5sYW5ndWFnZUNvZGUpXHJcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGVDb25maWdDb250YWluZXIuY29uZmlnLmxhbmd1YWdlQ29kZSA9IFwiZW5cIjtcclxuICAgICAgICAgICAgbGV0IHRyYW5zbGF0ZUNvbmZpZyA9IHsgY29uZmlnOiB7IHRyYW5zbGF0aW9uTmFtZTogJ2dsb2JhbCcsIGZpbGVQYXRoOiBjb25maWcuZ2xvYmFsRmlsZVBhdGggfSwgaW5zdGFuY2U6IG51bGwgfTtcclxuICAgICAgICAgICAgdmFyIGJhc2VSZXNvbHZlciA9IG5ldyBCYXNlUmVzb2x2ZXIoY29uZmlnLCBodHRwQ2xpZW50KTtcclxuICAgICAgICAgICAgYmFzZVJlc29sdmVyLnJlc29sdmVHbG9iYWwodHJhbnNsYXRlQ29uZmlnKTtcclxuICAgICAgICAgICAgb3ZlcnJpZGVQcm9wZXJ0eSgpO1xyXG4gICAgICAgICAgICBpZiAoY29uZmlnLmNvbnRyb2xFcnJvck1lc3NhZ2UpXHJcbiAgICAgICAgICAgICAgICBvdmVycmlkZUVycm9yc1Byb3BlcnR5KGNvbmZpZy5jb250cm9sRXJyb3JNZXNzYWdlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG4gICAgc3RhdGljIGZvclJvb3QoY29uZmlnPzogUnhUcmFuc2xhdGVDb25maWcpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPFJ4VHJhbnNsYXRlTW9kdWxlPiB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbmdNb2R1bGU6IFJ4VHJhbnNsYXRlTW9kdWxlLFxyXG4gICAgICAgICAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICAgICAgICAgIENvbXBvbmVudEd1YXJkLCBSeFRyYW5zbGF0aW9uLFxyXG4gICAgICAgICAgICAgICAgeyBwcm92aWRlOiBSWF9UUkFOU0xBVEVfQ09ORklHLCB1c2VWYWx1ZTogY29uZmlnIH0sXHJcbiAgICAgICAgICAgICAgICBjb25maWcubG9hZGVyID8geyBwcm92aWRlOiBDVVNUT01fTE9BREVSLCB1c2VDbGFzczogPGFueT5jb25maWcubG9hZGVyIH0gOiB7IHByb3ZpZGU6IENVU1RPTV9MT0FERVIsIHVzZVZhbHVlOiBudWxsIH0sXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuXHJcbn0iXX0=