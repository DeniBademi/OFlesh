import { ChangeDetectorRef } from "@angular/core";
import { MultiLingualData } from "../core/multilingual-data";
const NG_CONTEXT = "__ngContext__";
const NG_ELEMENT_ID = "__NG_ELEMENT_ID__";
const LVIEW = "_lView";
const CD_REF_INJECTING_VIEW = "_cdRefInjectingView";
const CONSTRUCTOR = "constructor";
export class RxChangeDetectorRef extends ChangeDetectorRef {
    constructor(instance) {
        super();
        this.instance = instance;
    }
    createViewRef() {
        if (this.instance[NG_CONTEXT] && this.instance[NG_CONTEXT].rxRefMarkedId === undefined) {
            let emulatedDom = this.instance[NG_CONTEXT][11];
            if (emulatedDom && emulatedDom.component && emulatedDom.component.onPush) {
                this.viewRef = super[CONSTRUCTOR][NG_ELEMENT_ID]();
                this.viewRef[LVIEW] = this.viewRef[CD_REF_INJECTING_VIEW] = this.instance[NG_CONTEXT][14];
            }
            this.setDestroyHooks();
            this.instance[NG_CONTEXT].rxRefMarkedId = Math.random();
        }
        return this.viewRef;
    }
    setDestroyHooks() {
        let tView = this.instance[NG_CONTEXT][1];
        if (!tView.destroyHooks)
            tView.destroyHooks = [this.instance[NG_CONTEXT].length - 1, () => { MultiLingualData.removeComponentPropValue(this.instance.constructor, this.instance[NG_CONTEXT].rxRefMarkedId); }];
        else
            tView.destroyHooks.push(this.instance[NG_CONTEXT].length - 1, () => {
                MultiLingualData.removeComponentPropValue(this.instance.constructor, this.instance[NG_CONTEXT].rxRefMarkedId);
            });
    }
    markForCheck() {
        this.viewRef.markForCheck();
    }
    detach() {
        throw new Error("Method not implemented.");
    }
    detectChanges() {
        throw new Error("Method not implemented.");
    }
    checkNoChanges() {
        throw new Error("Method not implemented.");
    }
    reattach() {
        throw new Error("Method not implemented.");
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicngtY2hhbmdlLWRldGVjdG9yLXJlZi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3RyYW5zbGF0ZS9zZXJ2aWNlL3J4LWNoYW5nZS1kZXRlY3Rvci1yZWYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFXLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzdELE1BQU0sVUFBVSxHQUFXLGVBQWUsQ0FBQztBQUMzQyxNQUFNLGFBQWEsR0FBVyxtQkFBbUIsQ0FBQztBQUNsRCxNQUFNLEtBQUssR0FBVyxRQUFRLENBQUM7QUFDL0IsTUFBTSxxQkFBcUIsR0FBVyxxQkFBcUIsQ0FBQztBQUM1RCxNQUFNLFdBQVcsR0FBVyxhQUFhLENBQUM7QUFDMUMsTUFBTSxPQUFPLG1CQUFvQixTQUFRLGlCQUFpQjtJQUV0RCxZQUFtQixRQUFhO1FBQzVCLEtBQUssRUFBRSxDQUFDO1FBRE8sYUFBUSxHQUFSLFFBQVEsQ0FBSztJQUVoQyxDQUFDO0lBRUQsYUFBYTtRQUNULElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLGFBQWEsS0FBSyxTQUFTLEVBQUU7WUFDcEYsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNoRCxJQUFJLFdBQVcsSUFBSSxXQUFXLENBQUMsU0FBUyxJQUFJLFdBQVcsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFO2dCQUN0RSxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO2dCQUNuRCxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMscUJBQXFCLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQzdGO1lBQ0QsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUMzRDtRQUNELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN4QixDQUFDO0lBRUQsZUFBZTtRQUNYLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekMsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZO1lBQ25CLEtBQUssQ0FBQyxZQUFZLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsZ0JBQWdCLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFBOztZQUVwTCxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFO2dCQUMvRCxnQkFBZ0IsQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFBO1lBQ2pILENBQUMsQ0FBQyxDQUFDO0lBQ1gsQ0FBQztJQUlELFlBQVk7UUFDUixJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ2hDLENBQUM7SUFDRCxNQUFNO1FBQ0YsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFDRCxhQUFhO1FBQ1QsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFDRCxjQUFjO1FBQ1YsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFDRCxRQUFRO1FBQ0osTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQy9DLENBQUM7Q0FHSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZpZXdSZWYsIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgTXVsdGlMaW5ndWFsRGF0YSB9IGZyb20gXCIuLi9jb3JlL211bHRpbGluZ3VhbC1kYXRhXCI7XHJcbmNvbnN0IE5HX0NPTlRFWFQ6IHN0cmluZyA9IFwiX19uZ0NvbnRleHRfX1wiO1xyXG5jb25zdCBOR19FTEVNRU5UX0lEOiBzdHJpbmcgPSBcIl9fTkdfRUxFTUVOVF9JRF9fXCI7XHJcbmNvbnN0IExWSUVXOiBzdHJpbmcgPSBcIl9sVmlld1wiO1xyXG5jb25zdCBDRF9SRUZfSU5KRUNUSU5HX1ZJRVc6IHN0cmluZyA9IFwiX2NkUmVmSW5qZWN0aW5nVmlld1wiO1xyXG5jb25zdCBDT05TVFJVQ1RPUjogc3RyaW5nID0gXCJjb25zdHJ1Y3RvclwiO1xyXG5leHBvcnQgY2xhc3MgUnhDaGFuZ2VEZXRlY3RvclJlZiBleHRlbmRzIENoYW5nZURldGVjdG9yUmVmIHtcclxuICAgIHZpZXdSZWY6IFZpZXdSZWY7XHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgaW5zdGFuY2U6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlVmlld1JlZigpIHtcclxuICAgICAgICBpZiAodGhpcy5pbnN0YW5jZVtOR19DT05URVhUXSAmJiB0aGlzLmluc3RhbmNlW05HX0NPTlRFWFRdLnJ4UmVmTWFya2VkSWQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBsZXQgZW11bGF0ZWREb20gPSB0aGlzLmluc3RhbmNlW05HX0NPTlRFWFRdWzExXTtcclxuICAgICAgICAgICAgaWYgKGVtdWxhdGVkRG9tICYmIGVtdWxhdGVkRG9tLmNvbXBvbmVudCAmJiBlbXVsYXRlZERvbS5jb21wb25lbnQub25QdXNoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdSZWYgPSBzdXBlcltDT05TVFJVQ1RPUl1bTkdfRUxFTUVOVF9JRF0oKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlld1JlZltMVklFV10gPSB0aGlzLnZpZXdSZWZbQ0RfUkVGX0lOSkVDVElOR19WSUVXXSA9IHRoaXMuaW5zdGFuY2VbTkdfQ09OVEVYVF1bMTRdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuc2V0RGVzdHJveUhvb2tzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VbTkdfQ09OVEVYVF0ucnhSZWZNYXJrZWRJZCA9IE1hdGgucmFuZG9tKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnZpZXdSZWY7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0RGVzdHJveUhvb2tzKCkge1xyXG4gICAgICAgIGxldCB0VmlldyA9IHRoaXMuaW5zdGFuY2VbTkdfQ09OVEVYVF1bMV07XHJcbiAgICAgICAgaWYgKCF0Vmlldy5kZXN0cm95SG9va3MpXHJcbiAgICAgICAgICAgIHRWaWV3LmRlc3Ryb3lIb29rcyA9IFt0aGlzLmluc3RhbmNlW05HX0NPTlRFWFRdLmxlbmd0aCAtIDEsICgpID0+IHsgTXVsdGlMaW5ndWFsRGF0YS5yZW1vdmVDb21wb25lbnRQcm9wVmFsdWUodGhpcy5pbnN0YW5jZS5jb25zdHJ1Y3RvciwgdGhpcy5pbnN0YW5jZVtOR19DT05URVhUXS5yeFJlZk1hcmtlZElkKSB9XVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgdFZpZXcuZGVzdHJveUhvb2tzLnB1c2godGhpcy5pbnN0YW5jZVtOR19DT05URVhUXS5sZW5ndGggLSAxLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBNdWx0aUxpbmd1YWxEYXRhLnJlbW92ZUNvbXBvbmVudFByb3BWYWx1ZSh0aGlzLmluc3RhbmNlLmNvbnN0cnVjdG9yLCB0aGlzLmluc3RhbmNlW05HX0NPTlRFWFRdLnJ4UmVmTWFya2VkSWQpXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgbWFya0ZvckNoZWNrKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudmlld1JlZi5tYXJrRm9yQ2hlY2soKTtcclxuICAgIH1cclxuICAgIGRldGFjaCgpOiB2b2lkIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuICAgIH1cclxuICAgIGRldGVjdENoYW5nZXMoKTogdm9pZCB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XHJcbiAgICB9XHJcbiAgICBjaGVja05vQ2hhbmdlcygpOiB2b2lkIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuICAgIH1cclxuICAgIHJlYXR0YWNoKCk6IHZvaWQge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgfVxyXG5cclxuXHJcbn0iXX0=