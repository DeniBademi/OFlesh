import { translateConfigContainer } from '../core/translate-config-container';
import { extract } from "../functions/extract";
import { getValue } from "../functions/get-value";
import { BaseResolver } from "../resolver/base-resolver";
import { HttpClient } from '@angular/common/http';
import { Injectable, ApplicationRef } from '@angular/core';
import { viewRefContainer } from '../core/view-ref-container';
import { TranslationCore } from '../core/translation-core';
export class RxTranslation {
    constructor(httpClient, ref) {
        this.httpClient = httpClient;
        this.ref = ref;
    }
    get language() {
        return translateConfigContainer.config.languageCode;
    }
    change(languageCode, onComplete) {
        var baseResolver = new BaseResolver(translateConfigContainer.config, this.httpClient);
        baseResolver.languageChanged(languageCode, () => { viewRefContainer.markForCheck(); if (onComplete)
            onComplete(); TranslationCore.languageChangedSubject.next(true); });
    }
    translate(text, data) {
        let extractor = extract(['{', '}']);
        let keys = extractor(text);
        keys.forEach(key => {
            text = text.replace(`{${key}}`, getValue(key, data));
        });
        return text;
    }
}
RxTranslation.decorators = [
    { type: Injectable }
];
RxTranslation.ctorParameters = () => [
    { type: HttpClient },
    { type: ApplicationRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicngtdHJhbnNsYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy90cmFuc2xhdGUvc2VydmljZS9yeC10cmFuc2xhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQTtBQUM3RSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ2xELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0QsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRTNELE1BQU0sT0FBTyxhQUFhO0lBQ3RCLFlBQW9CLFVBQXNCLEVBQVUsR0FBbUI7UUFBbkQsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUFVLFFBQUcsR0FBSCxHQUFHLENBQWdCO0lBQ3ZFLENBQUM7SUFDRCxJQUFJLFFBQVE7UUFDUixPQUFPLHdCQUF3QixDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUM7SUFDeEQsQ0FBQztJQUVELE1BQU0sQ0FBQyxZQUFvQixFQUFFLFVBQXFCO1FBQzlDLElBQUksWUFBWSxHQUFHLElBQUksWUFBWSxDQUFDLHdCQUF3QixDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdEYsWUFBWSxDQUFDLGVBQWUsQ0FBQyxZQUFZLEVBQUUsR0FBRyxFQUFFLEdBQUcsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxJQUFJLFVBQVU7WUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1SyxDQUFDO0lBR0QsU0FBUyxDQUFDLElBQVksRUFBRSxJQUE0QjtRQUNoRCxJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNwQyxJQUFJLElBQUksR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNmLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxHQUFHLEVBQUUsUUFBUSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3pELENBQUMsQ0FBQyxDQUFBO1FBQ0YsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQzs7O1lBckJKLFVBQVU7OztZQUpGLFVBQVU7WUFDRSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdHJhbnNsYXRlQ29uZmlnQ29udGFpbmVyIH0gZnJvbSAnLi4vY29yZS90cmFuc2xhdGUtY29uZmlnLWNvbnRhaW5lcidcclxuaW1wb3J0IHsgZXh0cmFjdCB9IGZyb20gXCIuLi9mdW5jdGlvbnMvZXh0cmFjdFwiO1xyXG5pbXBvcnQgeyBnZXRWYWx1ZSB9IGZyb20gXCIuLi9mdW5jdGlvbnMvZ2V0LXZhbHVlXCI7XHJcbmltcG9ydCB7IEJhc2VSZXNvbHZlciB9IGZyb20gXCIuLi9yZXNvbHZlci9iYXNlLXJlc29sdmVyXCI7XHJcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IEluamVjdGFibGUsIEFwcGxpY2F0aW9uUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IHZpZXdSZWZDb250YWluZXIgfSBmcm9tICcuLi9jb3JlL3ZpZXctcmVmLWNvbnRhaW5lcic7XHJcbmltcG9ydCB7IFRyYW5zbGF0aW9uQ29yZSB9IGZyb20gJy4uL2NvcmUvdHJhbnNsYXRpb24tY29yZSc7XHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFJ4VHJhbnNsYXRpb24ge1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwQ2xpZW50OiBIdHRwQ2xpZW50LCBwcml2YXRlIHJlZjogQXBwbGljYXRpb25SZWYpIHtcclxuICAgIH1cclxuICAgIGdldCBsYW5ndWFnZSgpIHtcclxuICAgICAgICByZXR1cm4gdHJhbnNsYXRlQ29uZmlnQ29udGFpbmVyLmNvbmZpZy5sYW5ndWFnZUNvZGU7XHJcbiAgICB9XHJcblxyXG4gICAgY2hhbmdlKGxhbmd1YWdlQ29kZTogc3RyaW5nLCBvbkNvbXBsZXRlPzogRnVuY3Rpb24pIHtcclxuICAgICAgICB2YXIgYmFzZVJlc29sdmVyID0gbmV3IEJhc2VSZXNvbHZlcih0cmFuc2xhdGVDb25maWdDb250YWluZXIuY29uZmlnLCB0aGlzLmh0dHBDbGllbnQpO1xyXG4gICAgICAgIGJhc2VSZXNvbHZlci5sYW5ndWFnZUNoYW5nZWQobGFuZ3VhZ2VDb2RlLCAoKSA9PiB7IHZpZXdSZWZDb250YWluZXIubWFya0ZvckNoZWNrKCk7IGlmIChvbkNvbXBsZXRlKSBvbkNvbXBsZXRlKCk7IFRyYW5zbGF0aW9uQ29yZS5sYW5ndWFnZUNoYW5nZWRTdWJqZWN0Lm5leHQodHJ1ZSk7IH0pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICB0cmFuc2xhdGUodGV4dDogc3RyaW5nLCBkYXRhOiB7IFtrZXk6IHN0cmluZ106IGFueSB9KSB7XHJcbiAgICAgICAgbGV0IGV4dHJhY3RvciA9IGV4dHJhY3QoWyd7JywgJ30nXSk7XHJcbiAgICAgICAgbGV0IGtleXMgPSBleHRyYWN0b3IodGV4dCk7XHJcbiAgICAgICAga2V5cy5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoYHske2tleX19YCwgZ2V0VmFsdWUoa2V5LCBkYXRhKSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICByZXR1cm4gdGV4dDtcclxuICAgIH1cclxufSJdfQ==