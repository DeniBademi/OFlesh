import { MultiLingualData } from "../core/multilingual-data";
import { TranslateModel } from '../model/translate.model';
import { getKeyName } from "./get-key-name";
import { translateConfigContainer } from "../core/translate-config-container";
import { viewRefContainer } from "../core/view-ref-container";
export function defineProperty(model, propertyName, modelName, languageCode, filePath) {
    let data = null;
    Object.defineProperty(model.prototype, propertyName, {
        get: function () {
            let keyName = getKeyName(modelName, languageCode, filePath);
            data = MultiLingualData.get(keyName);
            let refMarkedId = this["__ngContext__"] ? this["__ngContext__"].rxRefMarkedId : 0;
            let translationModelData = MultiLingualData.getComponentPropValue(keyName, this.constructor, refMarkedId);
            if ((data && !translationModelData))
                if (!translateConfigContainer.loading) {
                    refMarkedId = viewRefContainer.create(this);
                    MultiLingualData.addOrUpdateComponent(keyName, new TranslateModel(Object.assign({}, data), this, modelName, {}), this.constructor, refMarkedId);
                }
                else
                    return new TranslateModel(data, {}, modelName, {});
            let value = MultiLingualData.getComponentPropValue(keyName, this.constructor, refMarkedId);
            return value === undefined ? {} : value;
        },
        enumerable: true,
        configurable: true
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmaW5lLXByb3BlcnR5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvdHJhbnNsYXRlL2Z1bmN0aW9ucy9kZWZpbmUtcHJvcGVydHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzFELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1QyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUM5RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUU5RCxNQUFNLFVBQVUsY0FBYyxDQUFDLEtBQWUsRUFBRSxZQUFvQixFQUFFLFNBQWlCLEVBQUMsWUFBbUIsRUFBQyxRQUFlO0lBQ3ZILElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztJQUNoQixNQUFNLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsWUFBWSxFQUFFO1FBQ2pELEdBQUcsRUFBRTtZQUNELElBQUksT0FBTyxHQUFHLFVBQVUsQ0FBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQzVELElBQUksR0FBRyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDckMsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBRSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkYsSUFBSSxvQkFBb0IsR0FBRyxnQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUUsQ0FBQztZQUMzRyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsb0JBQW9CLENBQUM7Z0JBQy9CLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxPQUFPLEVBQUU7b0JBQ25DLFdBQVcsR0FBSSxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQzdDLGdCQUFnQixDQUFDLG9CQUFvQixDQUFDLE9BQU8sRUFBRSxJQUFJLGNBQWMsbUJBQU0sSUFBSSxHQUFJLElBQUksRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FBQztpQkFDdkk7O29CQUVHLE9BQU8sSUFBSSxjQUFjLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDM0QsSUFBSSxLQUFLLEdBQUcsZ0JBQWdCLENBQUMscUJBQXFCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFDM0YsT0FBTyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUM1QyxDQUFDO1FBQ0QsVUFBVSxFQUFFLElBQUk7UUFDaEIsWUFBWSxFQUFFLElBQUk7S0FDckIsQ0FBQyxDQUFBO0FBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE11bHRpTGluZ3VhbERhdGEgfSBmcm9tIFwiLi4vY29yZS9tdWx0aWxpbmd1YWwtZGF0YVwiO1xyXG5pbXBvcnQgeyBUcmFuc2xhdGVNb2RlbCB9IGZyb20gJy4uL21vZGVsL3RyYW5zbGF0ZS5tb2RlbCc7XHJcbmltcG9ydCB7IGdldEtleU5hbWUgfSBmcm9tIFwiLi9nZXQta2V5LW5hbWVcIjtcclxuaW1wb3J0IHsgdHJhbnNsYXRlQ29uZmlnQ29udGFpbmVyIH0gZnJvbSBcIi4uL2NvcmUvdHJhbnNsYXRlLWNvbmZpZy1jb250YWluZXJcIjtcclxuaW1wb3J0IHsgdmlld1JlZkNvbnRhaW5lciB9IGZyb20gXCIuLi9jb3JlL3ZpZXctcmVmLWNvbnRhaW5lclwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KG1vZGVsOiBGdW5jdGlvbiwgcHJvcGVydHlOYW1lOiBzdHJpbmcsIG1vZGVsTmFtZTogc3RyaW5nLGxhbmd1YWdlQ29kZTpzdHJpbmcsZmlsZVBhdGg6c3RyaW5nKSB7XHJcbiAgICBsZXQgZGF0YSA9IG51bGw7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kZWwucHJvdG90eXBlLCBwcm9wZXJ0eU5hbWUsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbGV0IGtleU5hbWUgPSBnZXRLZXlOYW1lKG1vZGVsTmFtZSwgbGFuZ3VhZ2VDb2RlLCBmaWxlUGF0aCk7XHJcbiAgICAgICAgICAgIGRhdGEgPSBNdWx0aUxpbmd1YWxEYXRhLmdldChrZXlOYW1lKTtcclxuICAgICAgICAgICAgbGV0IHJlZk1hcmtlZElkID0gdGhpc1tcIl9fbmdDb250ZXh0X19cIl0gPyAgdGhpc1tcIl9fbmdDb250ZXh0X19cIl0ucnhSZWZNYXJrZWRJZCA6IDA7XHJcbiAgICAgICAgICAgIGxldCB0cmFuc2xhdGlvbk1vZGVsRGF0YSA9IE11bHRpTGluZ3VhbERhdGEuZ2V0Q29tcG9uZW50UHJvcFZhbHVlKGtleU5hbWUsIHRoaXMuY29uc3RydWN0b3IsIHJlZk1hcmtlZElkICk7XHJcbiAgICAgICAgICAgIGlmICgoZGF0YSAmJiAhdHJhbnNsYXRpb25Nb2RlbERhdGEpKVxyXG4gICAgICAgICAgICAgICAgaWYgKCF0cmFuc2xhdGVDb25maWdDb250YWluZXIubG9hZGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlZk1hcmtlZElkICA9IHZpZXdSZWZDb250YWluZXIuY3JlYXRlKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIE11bHRpTGluZ3VhbERhdGEuYWRkT3JVcGRhdGVDb21wb25lbnQoa2V5TmFtZSwgbmV3IFRyYW5zbGF0ZU1vZGVsKHsgLi4uZGF0YSB9LCB0aGlzLCBtb2RlbE5hbWUsIHt9KSwgdGhpcy5jb25zdHJ1Y3RvciwgcmVmTWFya2VkSWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVHJhbnNsYXRlTW9kZWwoZGF0YSwge30sIG1vZGVsTmFtZSwge30pO1xyXG4gICAgICAgICAgICBsZXQgdmFsdWUgPSBNdWx0aUxpbmd1YWxEYXRhLmdldENvbXBvbmVudFByb3BWYWx1ZShrZXlOYW1lLCB0aGlzLmNvbnN0cnVjdG9yLCByZWZNYXJrZWRJZCk7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8ge30gOiB2YWx1ZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KVxyXG59XHJcbiJdfQ==