"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useKlaviyoForceReload = exports.useKlaviyo = void 0;
const react_1 = require("react");
function useKlaviyo(siteId) {
    react_1.useEffect(() => {
        const klaviyoScript = document.querySelector('[data-script^="klaviyo"]');
        if (klaviyoScript) {
            const src = klaviyoScript.getAttribute('src');
            const hasSameId = typeof src === 'string' && src.includes(siteId);
            if (hasSameId)
                return;
            klaviyoScript.remove();
        }
        injectScript(siteId);
    }, [siteId]);
}
exports.useKlaviyo = useKlaviyo;
/**
 * This is a special hook that sets two variables (`klaviyoModulesObject` and `klFormsObject`) to be `configurable`.
 * With that, we can reset them (`delete`).
 * If we reset them, then Klaviyo's script on load will find `div`s for embedded form and extend them with forms designed in Klaviyo app.
 * Klaviyo script sets them `configurable: false`. So we need to set them to `true` before script load.
 */
function useKlaviyoForceReload(siteId) {
    react_1.useEffect(() => {
        if (document.querySelector('[data-script="klaviyo"]')) {
            console.group('Problem running `useKlaviyoForceReload`');
            console.info('Looks like youâ€™ve already used `useKlaviyo`');
            console.info('Replace all `useKlaviyo` usages with `useKlaviyoForceReload`');
            console.groupEnd();
            return;
        }
        try {
            const klaviyoScript = document.querySelector('[data-script="klaviyo-force-reload"]');
            if (klaviyoScript) {
                delete window.klaviyoModulesObject;
                delete window.klFormsObject;
                klaviyoScript.remove();
            }
            Object.defineProperty(window, 'klaviyoModulesObject', { configurable: true });
            Object.defineProperty(window, 'klFormsObject', { configurable: true });
            const script = injectScript(siteId, 'klaviyo-force-reload');
            return () => {
                script.remove();
            };
        }
        catch (_a) { }
    }, [siteId]);
}
exports.useKlaviyoForceReload = useKlaviyoForceReload;
function injectScript(siteId, scriptName) {
    const script = document.createElement('script');
    script.async = true;
    script.src = '//static.klaviyo.com/onsite/js/klaviyo.js?company_id=' + siteId;
    script.dataset.script = scriptName !== null && scriptName !== void 0 ? scriptName : 'klaviyo';
    document.head.append(script);
    return script;
}
